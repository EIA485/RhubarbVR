//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace Steam
{
    using System.Runtime.InteropServices;
    
    public static partial class Networking
    {
        /// <summary>
        /// Interface used to send signaling messages for a particular connection.
        /// </summary>
        /// <remarks>
        /// - For connections initiated locally, you will construct it and pass
        /// it to ISteamNetworkingSockets::ConnectP2PCustomSignaling.
        /// - For connections initiated remotely and "accepted" locally, you
        /// will return it from ISteamNetworkingSignalingRecvContext::OnConnectRequest
        /// </remarks>
        public interface ISteamNetworkingConnectionSignaling
        {
            /// <summary>
            /// Called to send a rendezvous message to the remote peer.  This may be called
            /// from any thread, at any time, so you need to be thread-safe!  Don't take
            /// any locks that might hold while calling into SteamNetworkingSockets functions,
            /// because this could lead to deadlocks.
            /// </summary>
            /// <remarks>
            /// Note that when initiating a connection, we may not know the identity
            /// of the peer, if you did not specify it in ConnectP2PCustomSignaling.Return true if a best-effort attempt was made to deliver the message.
            /// If you return false, it is assumed that the situation is fatal;
            /// the connection will be closed, and Release() will be called
            /// eventually.Signaling objects will not be shared between connections.
            /// You can assume that the same value of hConn will be used
            /// every time.
            /// </remarks>
            [return:MarshalAs(UnmanagedType.U1)]
            bool SendSignal(Networking.HSteamNetConnection hConn, ref Networking.SteamNetConnectionInfo_t info, IntPtr pMsg, int cbMsg);
            
            /// <summary>
            /// Called when the connection no longer needs to send signals.
            /// Note that this happens eventually (but not immediately) after
            /// the connection is closed.  Signals may need to be sent for a brief
            /// time after the connection is closed, to clean up the connection.
            /// </summary>
            /// <remarks>
            /// If you do not need to save any additional per-connection information
            /// and can handle SendSignal() using only the arguments supplied, you do
            /// not need to actually create different objects per connection.  In that
            /// case, it is valid for all connections to use the same global object, and
            /// for this function to do nothing.
            /// </remarks>
            void Release();
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct uint64_steamid : IEquatable<uint64_steamid>
        {
            public uint64_steamid(ulong value) => this.Value = value;
            
            public readonly ulong Value;
            
            public bool Equals(uint64_steamid other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is uint64_steamid other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator ulong(uint64_steamid from) => from.Value;
            
            public static implicit operator uint64_steamid(ulong from) => new uint64_steamid(from);
            
            public static bool operator ==(uint64_steamid left, uint64_steamid right) => left.Equals(right);
            
            public static bool operator !=(uint64_steamid left, uint64_steamid right) => !left.Equals(right);
        }
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public delegate bool FSteamNetworkingSocketsCustomSignaling_SendSignal(IntPtr ctx, Networking.HSteamNetConnection hConn, ref Networking.SteamNetConnectionInfo_t info, IntPtr pMsg, int cbMsg);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void FSteamNetworkingSocketsCustomSignaling_Release(IntPtr ctx);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate IntPtr FSteamNetworkingCustomSignalingRecvContext_OnConnectRequest(IntPtr ctx, Networking.HSteamNetConnection hConn, ref Networking.SteamNetworkingIdentity identityPeer, int nLocalVirtualPort);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void FSteamNetworkingCustomSignalingRecvContext_SendRejectionSignal(IntPtr ctx, ref Networking.SteamNetworkingIdentity identityPeer, IntPtr pMsg, int cbMsg);
        
        /// <summary>
        /// ISteamNetworkingSockets
        /// </summary>
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern ref Networking.ISteamNetworkingSockets SteamAPI_SteamNetworkingSockets_v009();
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketIP(ref Networking.ISteamNetworkingSockets self, ref Networking.SteamNetworkingIPAddr localAddress, int nOptions, in Networking.SteamNetworkingConfigValue_t pOptions);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectByIPAddress(ref Networking.ISteamNetworkingSockets self, ref Networking.SteamNetworkingIPAddr address, int nOptions, in Networking.SteamNetworkingConfigValue_t pOptions);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateListenSocketP2P(ref Networking.ISteamNetworkingSockets self, int nLocalVirtualPort, int nOptions, in Networking.SteamNetworkingConfigValue_t pOptions);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectP2P(ref Networking.ISteamNetworkingSockets self, ref Networking.SteamNetworkingIdentity identityRemote, int nRemoteVirtualPort, int nOptions, in Networking.SteamNetworkingConfigValue_t pOptions);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.EResult SteamAPI_ISteamNetworkingSockets_AcceptConnection(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hConn);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_CloseConnection(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hPeer, int nReason, [MarshalAs(UnmanagedType.LPStr)] string pszDebug, [MarshalAs(UnmanagedType.U1)] bool bEnableLinger);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_CloseListenSocket(ref Networking.ISteamNetworkingSockets self, Networking.HSteamListenSocket hSocket);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_SetConnectionUserData(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hPeer, long nUserData);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern long SteamAPI_ISteamNetworkingSockets_GetConnectionUserData(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hPeer);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_ISteamNetworkingSockets_SetConnectionName(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hPeer, [MarshalAs(UnmanagedType.LPStr)] string pszName);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_GetConnectionName(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hPeer, IntPtr pszName, int nMaxLen);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.EResult SteamAPI_ISteamNetworkingSockets_SendMessageToConnection(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hConn, IntPtr pData, uint cbData, int nSendFlags, ref long pOutMessageNumber);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_ISteamNetworkingSockets_SendMessages(ref Networking.ISteamNetworkingSockets self, int nMessages, out IntPtr pMessages, ref long pOutMessageNumberOrResult);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.EResult SteamAPI_ISteamNetworkingSockets_FlushMessagesOnConnection(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hConn);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnConnection(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hConn, out IntPtr ppOutMessages, int nMaxMessages);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_GetConnectionInfo(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hConn, ref Networking.SteamNetConnectionInfo_t pInfo);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_GetQuickConnectionStatus(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hConn, ref Networking.SteamNetworkingQuickConnectionStatus pStats);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hConn, IntPtr pszBuf, int cbBuf);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_GetListenSocketAddress(ref Networking.ISteamNetworkingSockets self, Networking.HSteamListenSocket hSocket, ref Networking.SteamNetworkingIPAddr address);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_CreateSocketPair(ref Networking.ISteamNetworkingSockets self, ref Networking.HSteamNetConnection pOutConnection1, ref Networking.HSteamNetConnection pOutConnection2, [MarshalAs(UnmanagedType.U1)] bool bUseNetworkLoopback, in Networking.SteamNetworkingIdentity pIdentity1, in Networking.SteamNetworkingIdentity pIdentity2);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_GetIdentity(ref Networking.ISteamNetworkingSockets self, ref Networking.SteamNetworkingIdentity pIdentity);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_InitAuthentication(ref Networking.ISteamNetworkingSockets self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.ESteamNetworkingAvailability SteamAPI_ISteamNetworkingSockets_GetAuthenticationStatus(ref Networking.ISteamNetworkingSockets self, ref Networking.SteamNetAuthenticationStatus_t pDetails);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.HSteamNetPollGroup SteamAPI_ISteamNetworkingSockets_CreatePollGroup(ref Networking.ISteamNetworkingSockets self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_DestroyPollGroup(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetPollGroup hPollGroup);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetConnection hConn, Networking.HSteamNetPollGroup hPollGroup);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SteamAPI_ISteamNetworkingSockets_ReceiveMessagesOnPollGroup(ref Networking.ISteamNetworkingSockets self, Networking.HSteamNetPollGroup hPollGroup, out IntPtr ppOutMessages, int nMaxMessages);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_ReceivedRelayAuthTicket(ref Networking.ISteamNetworkingSockets self, IntPtr pvTicket, int cbTicket, Networking.SteamDatagramRelayAuthTicket pOutParsedTicket);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SteamAPI_ISteamNetworkingSockets_FindRelayAuthTicketForServer(ref Networking.ISteamNetworkingSockets self, ref Networking.SteamNetworkingIdentity identityGameServer, int nRemoteVirtualPort, Networking.SteamDatagramRelayAuthTicket pOutParsedTicket);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectToHostedDedicatedServer(ref Networking.ISteamNetworkingSockets self, ref Networking.SteamNetworkingIdentity identityTarget, int nRemoteVirtualPort, int nOptions, in Networking.SteamNetworkingConfigValue_t pOptions);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern ushort SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort(ref Networking.ISteamNetworkingSockets self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.SteamNetworkingPOPID SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID(ref Networking.ISteamNetworkingSockets self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.EResult SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerAddress(ref Networking.ISteamNetworkingSockets self, Networking.SteamDatagramHostedAddress pRouting);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.HSteamListenSocket SteamAPI_ISteamNetworkingSockets_CreateHostedDedicatedServerListenSocket(ref Networking.ISteamNetworkingSockets self, int nLocalVirtualPort, int nOptions, in Networking.SteamNetworkingConfigValue_t pOptions);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.EResult SteamAPI_ISteamNetworkingSockets_GetGameCoordinatorServerLogin(ref Networking.ISteamNetworkingSockets self, Networking.SteamDatagramGameCoordinatorServerLogin pLoginInfo, ref int pcbSignedBlob, IntPtr pBlob);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.HSteamNetConnection SteamAPI_ISteamNetworkingSockets_ConnectP2PCustomSignaling(ref Networking.ISteamNetworkingSockets self, ref Networking.ISteamNetworkingConnectionSignaling pSignaling, in Networking.SteamNetworkingIdentity pPeerIdentity, int nRemoteVirtualPort, int nOptions, in Networking.SteamNetworkingConfigValue_t pOptions);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal(ref Networking.ISteamNetworkingSockets self, IntPtr pMsg, int cbMsg, ref Networking.ISteamNetworkingSignalingRecvContext pContext);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_GetCertificateRequest(ref Networking.ISteamNetworkingSockets self, ref int pcbBlob, IntPtr pBlob, ref Networking.SteamNetworkingErrMsg errMsg);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_SetCertificate(ref Networking.ISteamNetworkingSockets self, IntPtr pCertificate, int cbCertificate, ref Networking.SteamNetworkingErrMsg errMsg);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_ISteamNetworkingSockets_RunCallbacks(ref Networking.ISteamNetworkingSockets self);
        
        /// <summary>
        /// ISteamNetworkingUtils
        /// </summary>
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern ref Networking.ISteamNetworkingUtils SteamAPI_SteamNetworkingUtils_v003();
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern ref Networking.SteamNetworkingMessage_t SteamAPI_ISteamNetworkingUtils_AllocateMessage(ref Networking.ISteamNetworkingUtils self, int cbAllocateBuffer);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess(ref Networking.ISteamNetworkingUtils self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.ESteamNetworkingAvailability SteamAPI_ISteamNetworkingUtils_GetRelayNetworkStatus(ref Networking.ISteamNetworkingUtils self, ref Networking.SteamRelayNetworkStatus_t pDetails);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern float SteamAPI_ISteamNetworkingUtils_GetLocalPingLocation(ref Networking.ISteamNetworkingUtils self, ref Networking.SteamNetworkPingLocation_t result);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeBetweenTwoLocations(ref Networking.ISteamNetworkingUtils self, ref Networking.SteamNetworkPingLocation_t location1, ref Networking.SteamNetworkPingLocation_t location2);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SteamAPI_ISteamNetworkingUtils_EstimatePingTimeFromLocalHost(ref Networking.ISteamNetworkingUtils self, ref Networking.SteamNetworkPingLocation_t remoteLocation);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_ISteamNetworkingUtils_ConvertPingLocationToString(ref Networking.ISteamNetworkingUtils self, ref Networking.SteamNetworkPingLocation_t location, IntPtr pszBuf, int cchBufSize);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_ParsePingLocationString(ref Networking.ISteamNetworkingUtils self, [MarshalAs(UnmanagedType.LPStr)] string pszString, ref Networking.SteamNetworkPingLocation_t result);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(ref Networking.ISteamNetworkingUtils self, float flMaxAgeSeconds);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(ref Networking.ISteamNetworkingUtils self, Networking.SteamNetworkingPOPID popID, ref Networking.SteamNetworkingPOPID pViaRelayPoP);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(ref Networking.ISteamNetworkingUtils self, Networking.SteamNetworkingPOPID popID);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SteamAPI_ISteamNetworkingUtils_GetPOPCount(ref Networking.ISteamNetworkingUtils self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern int SteamAPI_ISteamNetworkingUtils_GetPOPList(ref Networking.ISteamNetworkingUtils self, ref Networking.SteamNetworkingPOPID list, int nListSz);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.SteamNetworkingMicroseconds SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp(ref Networking.ISteamNetworkingUtils self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_ISteamNetworkingUtils_SetDebugOutputFunction(ref Networking.ISteamNetworkingUtils self, Networking.ESteamNetworkingSocketsDebugOutputType eDetailLevel, Networking.FSteamNetworkingSocketsDebugOutput pfnFunc);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueInt32(ref Networking.ISteamNetworkingUtils self, Networking.ESteamNetworkingConfigValue eValue, int val);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueFloat(ref Networking.ISteamNetworkingUtils self, Networking.ESteamNetworkingConfigValue eValue, float val);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValueString(ref Networking.ISteamNetworkingUtils self, Networking.ESteamNetworkingConfigValue eValue, [MarshalAs(UnmanagedType.LPStr)] string val);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetGlobalConfigValuePtr(ref Networking.ISteamNetworkingUtils self, Networking.ESteamNetworkingConfigValue eValue, IntPtr val);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueInt32(ref Networking.ISteamNetworkingUtils self, Networking.HSteamNetConnection hConn, Networking.ESteamNetworkingConfigValue eValue, int val);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueFloat(ref Networking.ISteamNetworkingUtils self, Networking.HSteamNetConnection hConn, Networking.ESteamNetworkingConfigValue eValue, float val);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetConnectionConfigValueString(ref Networking.ISteamNetworkingUtils self, Networking.HSteamNetConnection hConn, Networking.ESteamNetworkingConfigValue eValue, [MarshalAs(UnmanagedType.LPStr)] string val);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetConnectionStatusChanged(ref Networking.ISteamNetworkingUtils self, Networking.FnSteamNetConnectionStatusChanged fnCallback);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamNetAuthenticationStatusChanged(ref Networking.ISteamNetworkingUtils self, Networking.FnSteamNetAuthenticationStatusChanged fnCallback);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetGlobalCallback_SteamRelayNetworkStatusChanged(ref Networking.ISteamNetworkingUtils self, Networking.FnSteamRelayNetworkStatusChanged fnCallback);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetConfigValue(ref Networking.ISteamNetworkingUtils self, Networking.ESteamNetworkingConfigValue eValue, Networking.ESteamNetworkingConfigScope eScopeType, long scopeObj, Networking.ESteamNetworkingConfigDataType eDataType, IntPtr pArg);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingUtils_SetConfigValueStruct(ref Networking.ISteamNetworkingUtils self, ref Networking.SteamNetworkingConfigValue_t opt, Networking.ESteamNetworkingConfigScope eScopeType, long scopeObj);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.ESteamNetworkingGetConfigValueResult SteamAPI_ISteamNetworkingUtils_GetConfigValue(ref Networking.ISteamNetworkingUtils self, Networking.ESteamNetworkingConfigValue eValue, Networking.ESteamNetworkingConfigScope eScopeType, long scopeObj, ref Networking.ESteamNetworkingConfigDataType pOutDataType, IntPtr pResult, ref Networking.size_t cbResult);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.LPStr)]
        public static extern string SteamAPI_ISteamNetworkingUtils_GetConfigValueInfo(ref Networking.ISteamNetworkingUtils self, Networking.ESteamNetworkingConfigValue eValue, ref Networking.ESteamNetworkingConfigDataType pOutDataType, ref Networking.ESteamNetworkingConfigScope pOutScope);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.ESteamNetworkingConfigValue SteamAPI_ISteamNetworkingUtils_IterateGenericEditableConfigValues(ref Networking.ISteamNetworkingUtils self, Networking.ESteamNetworkingConfigValue eCurrent, [MarshalAs(UnmanagedType.U1)] bool bEnumerateDevVars);
        
        /// <summary>
        /// SteamNetworkingIPAddr
        /// </summary>
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingIPAddr_Clear(ref Networking.SteamNetworkingIPAddr self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_SteamNetworkingIPAddr_IsIPv6AllZeros(ref Networking.SteamNetworkingIPAddr self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingIPAddr_SetIPv6(ref Networking.SteamNetworkingIPAddr self, ref byte ipv6, ushort nPort);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingIPAddr_SetIPv4(ref Networking.SteamNetworkingIPAddr self, uint nIP, ushort nPort);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_SteamNetworkingIPAddr_IsIPv4(ref Networking.SteamNetworkingIPAddr self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern uint SteamAPI_SteamNetworkingIPAddr_GetIPv4(ref Networking.SteamNetworkingIPAddr self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingIPAddr_SetIPv6LocalHost(ref Networking.SteamNetworkingIPAddr self, ushort nPort);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_SteamNetworkingIPAddr_IsLocalHost(ref Networking.SteamNetworkingIPAddr self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_SteamNetworkingIPAddr_IsEqualTo(ref Networking.SteamNetworkingIPAddr self, ref Networking.SteamNetworkingIPAddr x);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingIPAddr_ToString(in Networking.SteamNetworkingIPAddr self, IntPtr buf, Networking.size_t cbBuf, [MarshalAs(UnmanagedType.U1)] bool bWithPort);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_SteamNetworkingIPAddr_ParseString(ref Networking.SteamNetworkingIPAddr self, [MarshalAs(UnmanagedType.LPStr)] string pszStr);
        
        /// <summary>
        /// SteamNetworkingIdentity
        /// </summary>
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingIdentity_Clear(ref Networking.SteamNetworkingIdentity self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_SteamNetworkingIdentity_IsInvalid(ref Networking.SteamNetworkingIdentity self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingIdentity_SetSteamID(ref Networking.SteamNetworkingIdentity self, Networking.uint64_steamid steamID);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern Networking.uint64_steamid SteamAPI_SteamNetworkingIdentity_GetSteamID(ref Networking.SteamNetworkingIdentity self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingIdentity_SetSteamID64(ref Networking.SteamNetworkingIdentity self, ulong steamID);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern ulong SteamAPI_SteamNetworkingIdentity_GetSteamID64(ref Networking.SteamNetworkingIdentity self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingIdentity_SetIPAddr(ref Networking.SteamNetworkingIdentity self, ref Networking.SteamNetworkingIPAddr addr);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern ref readonly Networking.SteamNetworkingIPAddr SteamAPI_SteamNetworkingIdentity_GetIPAddr(ref Networking.SteamNetworkingIdentity self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingIdentity_SetLocalHost(ref Networking.SteamNetworkingIdentity self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_SteamNetworkingIdentity_IsLocalHost(ref Networking.SteamNetworkingIdentity self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_SteamNetworkingIdentity_SetGenericString(ref Networking.SteamNetworkingIdentity self, [MarshalAs(UnmanagedType.LPStr)] string pszString);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.LPStr)]
        public static extern string SteamAPI_SteamNetworkingIdentity_GetGenericString(ref Networking.SteamNetworkingIdentity self);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_SteamNetworkingIdentity_SetGenericBytes(ref Networking.SteamNetworkingIdentity self, IntPtr data, uint cbLen);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern ref byte SteamAPI_SteamNetworkingIdentity_GetGenericBytes(ref Networking.SteamNetworkingIdentity self, ref int cbLen);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_SteamNetworkingIdentity_IsEqualTo(ref Networking.SteamNetworkingIdentity self, ref Networking.SteamNetworkingIdentity x);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingIdentity_ToString(in Networking.SteamNetworkingIdentity self, IntPtr buf, Networking.size_t cbBuf);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_SteamNetworkingIdentity_ParseString(ref Networking.SteamNetworkingIdentity self, Networking.size_t sizeofIdentity, [MarshalAs(UnmanagedType.LPStr)] string pszStr);
        
        /// <summary>
        /// SteamNetworkingMessage_t
        /// </summary>
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamAPI_SteamNetworkingMessage_t_Release(ref Networking.SteamNetworkingMessage_t self);
        
        /// <summary>
        /// Create an ISteamNetworkingConnectionSignaling object from plain C primitives.
        /// </summary>
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern ref Networking.ISteamNetworkingConnectionSignaling SteamAPI_ISteamNetworkingSockets_CreateCustomSignaling(IntPtr ctx, Networking.FSteamNetworkingSocketsCustomSignaling_SendSignal fnSendSignal, Networking.FSteamNetworkingSocketsCustomSignaling_Release fnRelease);
        
        /// <summary>
        /// Same as SteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal, but using plain C primitives.
        /// </summary>
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool SteamAPI_ISteamNetworkingSockets_ReceivedP2PCustomSignal2(ref Networking.ISteamNetworkingSockets self, IntPtr pMsg, int cbMsg, IntPtr ctx, Networking.FSteamNetworkingCustomSignalingRecvContext_OnConnectRequest fnOnConnectRequest, Networking.FSteamNetworkingCustomSignalingRecvContext_SendRejectionSignal fnSendRejectionSignal);
    }
}
