//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace Steam
{
    using System.Runtime.InteropServices;
    
    public static partial class Networking
    {
        /// <summary>
        /// General result codes
        /// </summary>
        public enum EResult : int
        {
            /// <summary>
            /// no result
            /// </summary>
            Eresultnone = unchecked((int)0),
            
            /// <summary>
            /// success
            /// </summary>
            Eresultok = unchecked((int)1),
            
            /// <summary>
            /// generic failure
            /// </summary>
            Eresultfail = unchecked((int)2),
            
            /// <summary>
            /// no/failed network connection
            /// </summary>
            Eresultnoconnection = unchecked((int)3),
            
            /// <summary>
            /// password/ticket is invalid
            /// </summary>
            Eresultinvalidpassword = unchecked((int)5),
            
            /// <summary>
            /// same user logged in elsewhere
            /// </summary>
            Eresultloggedinelsewhere = unchecked((int)6),
            
            /// <summary>
            /// protocol version is incorrect
            /// </summary>
            Eresultinvalidprotocolver = unchecked((int)7),
            
            /// <summary>
            /// a parameter is incorrect
            /// </summary>
            Eresultinvalidparam = unchecked((int)8),
            
            /// <summary>
            /// file was not found
            /// </summary>
            Eresultfilenotfound = unchecked((int)9),
            
            /// <summary>
            /// called method busy - action not taken
            /// </summary>
            Eresultbusy = unchecked((int)10),
            
            /// <summary>
            /// called object was in an invalid state
            /// </summary>
            Eresultinvalidstate = unchecked((int)11),
            
            /// <summary>
            /// name is invalid
            /// </summary>
            Eresultinvalidname = unchecked((int)12),
            
            /// <summary>
            /// email is invalid
            /// </summary>
            Eresultinvalidemail = unchecked((int)13),
            
            /// <summary>
            /// name is not unique
            /// </summary>
            Eresultduplicatename = unchecked((int)14),
            
            /// <summary>
            /// access is denied
            /// </summary>
            Eresultaccessdenied = unchecked((int)15),
            
            /// <summary>
            /// operation timed out
            /// </summary>
            Eresulttimeout = unchecked((int)16),
            
            /// <summary>
            /// VAC2 banned
            /// </summary>
            Eresultbanned = unchecked((int)17),
            
            /// <summary>
            /// account not found
            /// </summary>
            Eresultaccountnotfound = unchecked((int)18),
            
            /// <summary>
            /// steamID is invalid
            /// </summary>
            Eresultinvalidsteamid = unchecked((int)19),
            
            /// <summary>
            /// The requested service is currently unavailable
            /// </summary>
            Eresultserviceunavailable = unchecked((int)20),
            
            /// <summary>
            /// The user is not logged on
            /// </summary>
            Eresultnotloggedon = unchecked((int)21),
            
            /// <summary>
            /// Request is pending (may be in process, or waiting on third party)
            /// </summary>
            Eresultpending = unchecked((int)22),
            
            /// <summary>
            /// Encryption or Decryption failed
            /// </summary>
            Eresultencryptionfailure = unchecked((int)23),
            
            /// <summary>
            /// Insufficient privilege
            /// </summary>
            Eresultinsufficientprivilege = unchecked((int)24),
            
            /// <summary>
            /// Too much of a good thing
            /// </summary>
            Eresultlimitexceeded = unchecked((int)25),
            
            /// <summary>
            /// Access has been revoked (used for revoked guest passes)
            /// </summary>
            Eresultrevoked = unchecked((int)26),
            
            /// <summary>
            /// License/Guest pass the user is trying to access is expired
            /// </summary>
            Eresultexpired = unchecked((int)27),
            
            /// <summary>
            /// Guest pass has already been redeemed by account, cannot be acked again
            /// </summary>
            Eresultalreadyredeemed = unchecked((int)28),
            
            /// <summary>
            /// The request is a duplicate and the action has already occurred in the past, ignored this time
            /// </summary>
            Eresultduplicaterequest = unchecked((int)29),
            
            /// <summary>
            /// All the games in this guest pass redemption request are already owned by the user
            /// </summary>
            Eresultalreadyowned = unchecked((int)30),
            
            /// <summary>
            /// IP address not found
            /// </summary>
            Eresultipnotfound = unchecked((int)31),
            
            /// <summary>
            /// failed to write change to the data store
            /// </summary>
            Eresultpersistfailed = unchecked((int)32),
            
            /// <summary>
            /// failed to acquire access lock for this operation
            /// </summary>
            Eresultlockingfailed = unchecked((int)33),
            
            Eresultlogonsessionreplaced = unchecked((int)34),
            
            Eresultconnectfailed = unchecked((int)35),
            
            Eresulthandshakefailed = unchecked((int)36),
            
            Eresultiofailure = unchecked((int)37),
            
            Eresultremotedisconnect = unchecked((int)38),
            
            /// <summary>
            /// failed to find the shopping cart requested
            /// </summary>
            Eresultshoppingcartnotfound = unchecked((int)39),
            
            /// <summary>
            /// a user didn't allow it
            /// </summary>
            Eresultblocked = unchecked((int)40),
            
            /// <summary>
            /// target is ignoring sender
            /// </summary>
            Eresultignored = unchecked((int)41),
            
            /// <summary>
            /// nothing matching the request found
            /// </summary>
            Eresultnomatch = unchecked((int)42),
            
            Eresultaccountdisabled = unchecked((int)43),
            
            /// <summary>
            /// this service is not accepting content changes right now
            /// </summary>
            Eresultservicereadonly = unchecked((int)44),
            
            /// <summary>
            /// account doesn't have value, so this feature isn't available
            /// </summary>
            Eresultaccountnotfeatured = unchecked((int)45),
            
            /// <summary>
            /// allowed to take this action, but only because requester is admin
            /// </summary>
            Eresultadministratorok = unchecked((int)46),
            
            /// <summary>
            /// A Version mismatch in content transmitted within the Steam protocol.
            /// </summary>
            Eresultcontentversion = unchecked((int)47),
            
            /// <summary>
            /// The current CM can't service the user making a request, user should try another.
            /// </summary>
            Eresulttryanothercm = unchecked((int)48),
            
            /// <summary>
            /// You are already logged in elsewhere, this cached credential login has failed.
            /// </summary>
            Eresultpasswordrequiredtokicksession = unchecked((int)49),
            
            /// <summary>
            /// You are already logged in elsewhere, you must wait
            /// </summary>
            Eresultalreadyloggedinelsewhere = unchecked((int)50),
            
            /// <summary>
            /// Long running operation (content download) suspended/paused
            /// </summary>
            Eresultsuspended = unchecked((int)51),
            
            /// <summary>
            /// Operation canceled (typically by user: content download)
            /// </summary>
            Eresultcancelled = unchecked((int)52),
            
            /// <summary>
            /// Operation canceled because data is ill formed or unrecoverable
            /// </summary>
            Eresultdatacorruption = unchecked((int)53),
            
            /// <summary>
            /// Operation canceled - not enough disk space.
            /// </summary>
            Eresultdiskfull = unchecked((int)54),
            
            /// <summary>
            /// an remote call or IPC call failed
            /// </summary>
            Eresultremotecallfailed = unchecked((int)55),
            
            /// <summary>
            /// Password could not be verified as it's unset server side
            /// </summary>
            Eresultpasswordunset = unchecked((int)56),
            
            /// <summary>
            /// External account (PSN, Facebook...) is not linked to a Steam account
            /// </summary>
            Eresultexternalaccountunlinked = unchecked((int)57),
            
            /// <summary>
            /// PSN ticket was invalid
            /// </summary>
            Eresultpsnticketinvalid = unchecked((int)58),
            
            /// <summary>
            /// External account (PSN, Facebook...) is already linked to some other account, must explicitly request to replace/delete the link first
            /// </summary>
            Eresultexternalaccountalreadylinked = unchecked((int)59),
            
            /// <summary>
            /// The sync cannot resume due to a conflict between the local and remote files
            /// </summary>
            Eresultremotefileconflict = unchecked((int)60),
            
            /// <summary>
            /// The requested new password is not legal
            /// </summary>
            Eresultillegalpassword = unchecked((int)61),
            
            /// <summary>
            /// new value is the same as the old one ( secret question and answer )
            /// </summary>
            Eresultsameaspreviousvalue = unchecked((int)62),
            
            /// <summary>
            /// account login denied due to 2nd factor authentication failure
            /// </summary>
            Eresultaccountlogondenied = unchecked((int)63),
            
            /// <summary>
            /// The requested new password is not legal
            /// </summary>
            Eresultcannotuseoldpassword = unchecked((int)64),
            
            /// <summary>
            /// account login denied due to auth code invalid
            /// </summary>
            Eresultinvalidloginauthcode = unchecked((int)65),
            
            /// <summary>
            /// account login denied due to 2nd factor auth failure - and no mail has been sent
            /// </summary>
            Eresultaccountlogondeniednomail = unchecked((int)66),
            
            /// <summary>
            /// 
            /// </summary>
            Eresulthardwarenotcapableofipt = unchecked((int)67),
            
            /// <summary>
            /// 
            /// </summary>
            Eresultiptiniterror = unchecked((int)68),
            
            /// <summary>
            /// operation failed due to parental control restrictions for current user
            /// </summary>
            Eresultparentalcontrolrestricted = unchecked((int)69),
            
            /// <summary>
            /// Facebook query returned an error
            /// </summary>
            Eresultfacebookqueryerror = unchecked((int)70),
            
            /// <summary>
            /// account login denied due to auth code expired
            /// </summary>
            Eresultexpiredloginauthcode = unchecked((int)71),
            
            Eresultiploginrestrictionfailed = unchecked((int)72),
            
            Eresultaccountlockeddown = unchecked((int)73),
            
            Eresultaccountlogondeniedverifiedemailrequired = unchecked((int)74),
            
            Eresultnomatchingurl = unchecked((int)75),
            
            /// <summary>
            /// parse failure, missing field, etc.
            /// </summary>
            Eresultbadresponse = unchecked((int)76),
            
            /// <summary>
            /// The user cannot complete the action until they re-enter their password
            /// </summary>
            Eresultrequirepasswordreentry = unchecked((int)77),
            
            /// <summary>
            /// the value entered is outside the acceptable range
            /// </summary>
            Eresultvalueoutofrange = unchecked((int)78),
            
            /// <summary>
            /// something happened that we didn't expect to ever happen
            /// </summary>
            Eresultunexpectederror = unchecked((int)79),
            
            /// <summary>
            /// The requested service has been configured to be unavailable
            /// </summary>
            Eresultdisabled = unchecked((int)80),
            
            /// <summary>
            /// The set of files submitted to the CEG server are not valid !
            /// </summary>
            Eresultinvalidcegsubmission = unchecked((int)81),
            
            /// <summary>
            /// The device being used is not allowed to perform this action
            /// </summary>
            Eresultrestricteddevice = unchecked((int)82),
            
            /// <summary>
            /// The action could not be complete because it is region restricted
            /// </summary>
            Eresultregionlocked = unchecked((int)83),
            
            /// <summary>
            /// Temporary rate limit exceeded, try again later, different from k_EResultLimitExceeded which may be permanent
            /// </summary>
            Eresultratelimitexceeded = unchecked((int)84),
            
            /// <summary>
            /// Need two-factor code to login
            /// </summary>
            Eresultaccountlogindeniedneedtwofactor = unchecked((int)85),
            
            /// <summary>
            /// The thing we're trying to access has been deleted
            /// </summary>
            Eresultitemdeleted = unchecked((int)86),
            
            /// <summary>
            /// login attempt failed, try to throttle response to possible attacker
            /// </summary>
            Eresultaccountlogindeniedthrottle = unchecked((int)87),
            
            /// <summary>
            /// two factor code mismatch
            /// </summary>
            Eresulttwofactorcodemismatch = unchecked((int)88),
            
            /// <summary>
            /// activation code for two-factor didn't match
            /// </summary>
            Eresulttwofactoractivationcodemismatch = unchecked((int)89),
            
            /// <summary>
            /// account has been associated with multiple partners
            /// </summary>
            Eresultaccountassociatedtomultiplepartners = unchecked((int)90),
            
            /// <summary>
            /// data not modified
            /// </summary>
            Eresultnotmodified = unchecked((int)91),
            
            /// <summary>
            /// the account does not have a mobile device associated with it
            /// </summary>
            Eresultnomobiledevice = unchecked((int)92),
            
            /// <summary>
            /// the time presented is out of range or tolerance
            /// </summary>
            Eresulttimenotsynced = unchecked((int)93),
            
            /// <summary>
            /// SMS code failure (no match, none pending, etc.)
            /// </summary>
            Eresultsmscodefailed = unchecked((int)94),
            
            /// <summary>
            /// Too many accounts access this resource
            /// </summary>
            Eresultaccountlimitexceeded = unchecked((int)95),
            
            /// <summary>
            /// Too many changes to this account
            /// </summary>
            Eresultaccountactivitylimitexceeded = unchecked((int)96),
            
            /// <summary>
            /// Too many changes to this phone
            /// </summary>
            Eresultphoneactivitylimitexceeded = unchecked((int)97),
            
            /// <summary>
            /// Cannot refund to payment method, must use wallet
            /// </summary>
            Eresultrefundtowallet = unchecked((int)98),
            
            /// <summary>
            /// Cannot send an email
            /// </summary>
            Eresultemailsendfailure = unchecked((int)99),
            
            /// <summary>
            /// Can't perform operation till payment has settled
            /// </summary>
            Eresultnotsettled = unchecked((int)100),
            
            /// <summary>
            /// Needs to provide a valid captcha
            /// </summary>
            Eresultneedcaptcha = unchecked((int)101),
            
            /// <summary>
            /// a game server login token owned by this token's owner has been banned
            /// </summary>
            Eresultgsltdenied = unchecked((int)102),
            
            /// <summary>
            /// game server owner is denied for other reason (account lock, community ban, vac ban, missing phone)
            /// </summary>
            Eresultgsownerdenied = unchecked((int)103),
            
            /// <summary>
            /// the type of thing we were requested to act on is invalid
            /// </summary>
            Eresultinvaliditemtype = unchecked((int)104),
            
            /// <summary>
            /// the ip address has been banned from taking this action
            /// </summary>
            Eresultipbanned = unchecked((int)105),
            
            /// <summary>
            /// this token has expired from disuse; can be reset for use
            /// </summary>
            Eresultgsltexpired = unchecked((int)106),
            
            /// <summary>
            /// user doesn't have enough wallet funds to complete the action
            /// </summary>
            Eresultinsufficientfunds = unchecked((int)107),
            
            /// <summary>
            /// There are too many of this thing pending already
            /// </summary>
            Eresulttoomanypending = unchecked((int)108),
            
            /// <summary>
            /// No site licenses found
            /// </summary>
            Eresultnositelicensesfound = unchecked((int)109),
            
            /// <summary>
            /// the WG couldn't send a response because we exceeded max network send size
            /// </summary>
            Eresultwgnetworksendexceeded = unchecked((int)110),
            
            /// <summary>
            /// the user is not mutually friends
            /// </summary>
            Eresultaccountnotfriends = unchecked((int)111),
            
            /// <summary>
            /// the user is limited
            /// </summary>
            Eresultlimiteduseraccount = unchecked((int)112),
            
            /// <summary>
            /// item can't be removed
            /// </summary>
            Eresultcantremoveitem = unchecked((int)113),
            
            /// <summary>
            /// account has been deleted
            /// </summary>
            Eresultaccountdeleted = unchecked((int)114),
            
            /// <summary>
            /// A license for this already exists, but cancelled
            /// </summary>
            Eresultexistingusercancelledlicense = unchecked((int)115),
            
            /// <summary>
            /// access is denied because of a community cooldown (probably from support profile data resets)
            /// </summary>
            Eresultcommunitycooldown = unchecked((int)116),
            
            /// <summary>
            /// No launcher was specified, but a launcher was needed to choose correct realm for operation.
            /// </summary>
            Eresultnolauncherspecified = unchecked((int)117),
            
            /// <summary>
            /// User must agree to china SSA or global SSA before login
            /// </summary>
            Eresultmustagreetossa = unchecked((int)118),
            
            /// <summary>
            /// The specified launcher type is no longer supported; the user should be directed elsewhere
            /// </summary>
            Eresultlaunchermigrated = unchecked((int)119),
            
            /// <summary>
            /// The user's realm does not match the realm of the requested resource
            /// </summary>
            Eresultsteamrealmmismatch = unchecked((int)120),
            
            /// <summary>
            /// signature check did not match
            /// </summary>
            Eresultinvalidsignature = unchecked((int)121),
            
            /// <summary>
            /// Failed to parse input
            /// </summary>
            Eresultparsefailure = unchecked((int)122),
            
            /// <summary>
            /// account does not have a verified phone number
            /// </summary>
            Eresultnoverifiedphone = unchecked((int)123),
        }
        
        /// <summary>
        /// no result
        /// </summary>
        public const Networking.EResult Eresultnone = EResult.Eresultnone;
        
        /// <summary>
        /// success
        /// </summary>
        public const Networking.EResult Eresultok = EResult.Eresultok;
        
        /// <summary>
        /// generic failure
        /// </summary>
        public const Networking.EResult Eresultfail = EResult.Eresultfail;
        
        /// <summary>
        /// no/failed network connection
        /// </summary>
        public const Networking.EResult Eresultnoconnection = EResult.Eresultnoconnection;
        
        /// <summary>
        /// password/ticket is invalid
        /// </summary>
        public const Networking.EResult Eresultinvalidpassword = EResult.Eresultinvalidpassword;
        
        /// <summary>
        /// same user logged in elsewhere
        /// </summary>
        public const Networking.EResult Eresultloggedinelsewhere = EResult.Eresultloggedinelsewhere;
        
        /// <summary>
        /// protocol version is incorrect
        /// </summary>
        public const Networking.EResult Eresultinvalidprotocolver = EResult.Eresultinvalidprotocolver;
        
        /// <summary>
        /// a parameter is incorrect
        /// </summary>
        public const Networking.EResult Eresultinvalidparam = EResult.Eresultinvalidparam;
        
        /// <summary>
        /// file was not found
        /// </summary>
        public const Networking.EResult Eresultfilenotfound = EResult.Eresultfilenotfound;
        
        /// <summary>
        /// called method busy - action not taken
        /// </summary>
        public const Networking.EResult Eresultbusy = EResult.Eresultbusy;
        
        /// <summary>
        /// called object was in an invalid state
        /// </summary>
        public const Networking.EResult Eresultinvalidstate = EResult.Eresultinvalidstate;
        
        /// <summary>
        /// name is invalid
        /// </summary>
        public const Networking.EResult Eresultinvalidname = EResult.Eresultinvalidname;
        
        /// <summary>
        /// email is invalid
        /// </summary>
        public const Networking.EResult Eresultinvalidemail = EResult.Eresultinvalidemail;
        
        /// <summary>
        /// name is not unique
        /// </summary>
        public const Networking.EResult Eresultduplicatename = EResult.Eresultduplicatename;
        
        /// <summary>
        /// access is denied
        /// </summary>
        public const Networking.EResult Eresultaccessdenied = EResult.Eresultaccessdenied;
        
        /// <summary>
        /// operation timed out
        /// </summary>
        public const Networking.EResult Eresulttimeout = EResult.Eresulttimeout;
        
        /// <summary>
        /// VAC2 banned
        /// </summary>
        public const Networking.EResult Eresultbanned = EResult.Eresultbanned;
        
        /// <summary>
        /// account not found
        /// </summary>
        public const Networking.EResult Eresultaccountnotfound = EResult.Eresultaccountnotfound;
        
        /// <summary>
        /// steamID is invalid
        /// </summary>
        public const Networking.EResult Eresultinvalidsteamid = EResult.Eresultinvalidsteamid;
        
        /// <summary>
        /// The requested service is currently unavailable
        /// </summary>
        public const Networking.EResult Eresultserviceunavailable = EResult.Eresultserviceunavailable;
        
        /// <summary>
        /// The user is not logged on
        /// </summary>
        public const Networking.EResult Eresultnotloggedon = EResult.Eresultnotloggedon;
        
        /// <summary>
        /// Request is pending (may be in process, or waiting on third party)
        /// </summary>
        public const Networking.EResult Eresultpending = EResult.Eresultpending;
        
        /// <summary>
        /// Encryption or Decryption failed
        /// </summary>
        public const Networking.EResult Eresultencryptionfailure = EResult.Eresultencryptionfailure;
        
        /// <summary>
        /// Insufficient privilege
        /// </summary>
        public const Networking.EResult Eresultinsufficientprivilege = EResult.Eresultinsufficientprivilege;
        
        /// <summary>
        /// Too much of a good thing
        /// </summary>
        public const Networking.EResult Eresultlimitexceeded = EResult.Eresultlimitexceeded;
        
        /// <summary>
        /// Access has been revoked (used for revoked guest passes)
        /// </summary>
        public const Networking.EResult Eresultrevoked = EResult.Eresultrevoked;
        
        /// <summary>
        /// License/Guest pass the user is trying to access is expired
        /// </summary>
        public const Networking.EResult Eresultexpired = EResult.Eresultexpired;
        
        /// <summary>
        /// Guest pass has already been redeemed by account, cannot be acked again
        /// </summary>
        public const Networking.EResult Eresultalreadyredeemed = EResult.Eresultalreadyredeemed;
        
        /// <summary>
        /// The request is a duplicate and the action has already occurred in the past, ignored this time
        /// </summary>
        public const Networking.EResult Eresultduplicaterequest = EResult.Eresultduplicaterequest;
        
        /// <summary>
        /// All the games in this guest pass redemption request are already owned by the user
        /// </summary>
        public const Networking.EResult Eresultalreadyowned = EResult.Eresultalreadyowned;
        
        /// <summary>
        /// IP address not found
        /// </summary>
        public const Networking.EResult Eresultipnotfound = EResult.Eresultipnotfound;
        
        /// <summary>
        /// failed to write change to the data store
        /// </summary>
        public const Networking.EResult Eresultpersistfailed = EResult.Eresultpersistfailed;
        
        /// <summary>
        /// failed to acquire access lock for this operation
        /// </summary>
        public const Networking.EResult Eresultlockingfailed = EResult.Eresultlockingfailed;
        
        public const Networking.EResult Eresultlogonsessionreplaced = EResult.Eresultlogonsessionreplaced;
        
        public const Networking.EResult Eresultconnectfailed = EResult.Eresultconnectfailed;
        
        public const Networking.EResult Eresulthandshakefailed = EResult.Eresulthandshakefailed;
        
        public const Networking.EResult Eresultiofailure = EResult.Eresultiofailure;
        
        public const Networking.EResult Eresultremotedisconnect = EResult.Eresultremotedisconnect;
        
        /// <summary>
        /// failed to find the shopping cart requested
        /// </summary>
        public const Networking.EResult Eresultshoppingcartnotfound = EResult.Eresultshoppingcartnotfound;
        
        /// <summary>
        /// a user didn't allow it
        /// </summary>
        public const Networking.EResult Eresultblocked = EResult.Eresultblocked;
        
        /// <summary>
        /// target is ignoring sender
        /// </summary>
        public const Networking.EResult Eresultignored = EResult.Eresultignored;
        
        /// <summary>
        /// nothing matching the request found
        /// </summary>
        public const Networking.EResult Eresultnomatch = EResult.Eresultnomatch;
        
        public const Networking.EResult Eresultaccountdisabled = EResult.Eresultaccountdisabled;
        
        /// <summary>
        /// this service is not accepting content changes right now
        /// </summary>
        public const Networking.EResult Eresultservicereadonly = EResult.Eresultservicereadonly;
        
        /// <summary>
        /// account doesn't have value, so this feature isn't available
        /// </summary>
        public const Networking.EResult Eresultaccountnotfeatured = EResult.Eresultaccountnotfeatured;
        
        /// <summary>
        /// allowed to take this action, but only because requester is admin
        /// </summary>
        public const Networking.EResult Eresultadministratorok = EResult.Eresultadministratorok;
        
        /// <summary>
        /// A Version mismatch in content transmitted within the Steam protocol.
        /// </summary>
        public const Networking.EResult Eresultcontentversion = EResult.Eresultcontentversion;
        
        /// <summary>
        /// The current CM can't service the user making a request, user should try another.
        /// </summary>
        public const Networking.EResult Eresulttryanothercm = EResult.Eresulttryanothercm;
        
        /// <summary>
        /// You are already logged in elsewhere, this cached credential login has failed.
        /// </summary>
        public const Networking.EResult Eresultpasswordrequiredtokicksession = EResult.Eresultpasswordrequiredtokicksession;
        
        /// <summary>
        /// You are already logged in elsewhere, you must wait
        /// </summary>
        public const Networking.EResult Eresultalreadyloggedinelsewhere = EResult.Eresultalreadyloggedinelsewhere;
        
        /// <summary>
        /// Long running operation (content download) suspended/paused
        /// </summary>
        public const Networking.EResult Eresultsuspended = EResult.Eresultsuspended;
        
        /// <summary>
        /// Operation canceled (typically by user: content download)
        /// </summary>
        public const Networking.EResult Eresultcancelled = EResult.Eresultcancelled;
        
        /// <summary>
        /// Operation canceled because data is ill formed or unrecoverable
        /// </summary>
        public const Networking.EResult Eresultdatacorruption = EResult.Eresultdatacorruption;
        
        /// <summary>
        /// Operation canceled - not enough disk space.
        /// </summary>
        public const Networking.EResult Eresultdiskfull = EResult.Eresultdiskfull;
        
        /// <summary>
        /// an remote call or IPC call failed
        /// </summary>
        public const Networking.EResult Eresultremotecallfailed = EResult.Eresultremotecallfailed;
        
        /// <summary>
        /// Password could not be verified as it's unset server side
        /// </summary>
        public const Networking.EResult Eresultpasswordunset = EResult.Eresultpasswordunset;
        
        /// <summary>
        /// External account (PSN, Facebook...) is not linked to a Steam account
        /// </summary>
        public const Networking.EResult Eresultexternalaccountunlinked = EResult.Eresultexternalaccountunlinked;
        
        /// <summary>
        /// PSN ticket was invalid
        /// </summary>
        public const Networking.EResult Eresultpsnticketinvalid = EResult.Eresultpsnticketinvalid;
        
        /// <summary>
        /// External account (PSN, Facebook...) is already linked to some other account, must explicitly request to replace/delete the link first
        /// </summary>
        public const Networking.EResult Eresultexternalaccountalreadylinked = EResult.Eresultexternalaccountalreadylinked;
        
        /// <summary>
        /// The sync cannot resume due to a conflict between the local and remote files
        /// </summary>
        public const Networking.EResult Eresultremotefileconflict = EResult.Eresultremotefileconflict;
        
        /// <summary>
        /// The requested new password is not legal
        /// </summary>
        public const Networking.EResult Eresultillegalpassword = EResult.Eresultillegalpassword;
        
        /// <summary>
        /// new value is the same as the old one ( secret question and answer )
        /// </summary>
        public const Networking.EResult Eresultsameaspreviousvalue = EResult.Eresultsameaspreviousvalue;
        
        /// <summary>
        /// account login denied due to 2nd factor authentication failure
        /// </summary>
        public const Networking.EResult Eresultaccountlogondenied = EResult.Eresultaccountlogondenied;
        
        /// <summary>
        /// The requested new password is not legal
        /// </summary>
        public const Networking.EResult Eresultcannotuseoldpassword = EResult.Eresultcannotuseoldpassword;
        
        /// <summary>
        /// account login denied due to auth code invalid
        /// </summary>
        public const Networking.EResult Eresultinvalidloginauthcode = EResult.Eresultinvalidloginauthcode;
        
        /// <summary>
        /// account login denied due to 2nd factor auth failure - and no mail has been sent
        /// </summary>
        public const Networking.EResult Eresultaccountlogondeniednomail = EResult.Eresultaccountlogondeniednomail;
        
        /// <summary>
        /// 
        /// </summary>
        public const Networking.EResult Eresulthardwarenotcapableofipt = EResult.Eresulthardwarenotcapableofipt;
        
        /// <summary>
        /// 
        /// </summary>
        public const Networking.EResult Eresultiptiniterror = EResult.Eresultiptiniterror;
        
        /// <summary>
        /// operation failed due to parental control restrictions for current user
        /// </summary>
        public const Networking.EResult Eresultparentalcontrolrestricted = EResult.Eresultparentalcontrolrestricted;
        
        /// <summary>
        /// Facebook query returned an error
        /// </summary>
        public const Networking.EResult Eresultfacebookqueryerror = EResult.Eresultfacebookqueryerror;
        
        /// <summary>
        /// account login denied due to auth code expired
        /// </summary>
        public const Networking.EResult Eresultexpiredloginauthcode = EResult.Eresultexpiredloginauthcode;
        
        public const Networking.EResult Eresultiploginrestrictionfailed = EResult.Eresultiploginrestrictionfailed;
        
        public const Networking.EResult Eresultaccountlockeddown = EResult.Eresultaccountlockeddown;
        
        public const Networking.EResult Eresultaccountlogondeniedverifiedemailrequired = EResult.Eresultaccountlogondeniedverifiedemailrequired;
        
        public const Networking.EResult Eresultnomatchingurl = EResult.Eresultnomatchingurl;
        
        /// <summary>
        /// parse failure, missing field, etc.
        /// </summary>
        public const Networking.EResult Eresultbadresponse = EResult.Eresultbadresponse;
        
        /// <summary>
        /// The user cannot complete the action until they re-enter their password
        /// </summary>
        public const Networking.EResult Eresultrequirepasswordreentry = EResult.Eresultrequirepasswordreentry;
        
        /// <summary>
        /// the value entered is outside the acceptable range
        /// </summary>
        public const Networking.EResult Eresultvalueoutofrange = EResult.Eresultvalueoutofrange;
        
        /// <summary>
        /// something happened that we didn't expect to ever happen
        /// </summary>
        public const Networking.EResult Eresultunexpectederror = EResult.Eresultunexpectederror;
        
        /// <summary>
        /// The requested service has been configured to be unavailable
        /// </summary>
        public const Networking.EResult Eresultdisabled = EResult.Eresultdisabled;
        
        /// <summary>
        /// The set of files submitted to the CEG server are not valid !
        /// </summary>
        public const Networking.EResult Eresultinvalidcegsubmission = EResult.Eresultinvalidcegsubmission;
        
        /// <summary>
        /// The device being used is not allowed to perform this action
        /// </summary>
        public const Networking.EResult Eresultrestricteddevice = EResult.Eresultrestricteddevice;
        
        /// <summary>
        /// The action could not be complete because it is region restricted
        /// </summary>
        public const Networking.EResult Eresultregionlocked = EResult.Eresultregionlocked;
        
        /// <summary>
        /// Temporary rate limit exceeded, try again later, different from k_EResultLimitExceeded which may be permanent
        /// </summary>
        public const Networking.EResult Eresultratelimitexceeded = EResult.Eresultratelimitexceeded;
        
        /// <summary>
        /// Need two-factor code to login
        /// </summary>
        public const Networking.EResult Eresultaccountlogindeniedneedtwofactor = EResult.Eresultaccountlogindeniedneedtwofactor;
        
        /// <summary>
        /// The thing we're trying to access has been deleted
        /// </summary>
        public const Networking.EResult Eresultitemdeleted = EResult.Eresultitemdeleted;
        
        /// <summary>
        /// login attempt failed, try to throttle response to possible attacker
        /// </summary>
        public const Networking.EResult Eresultaccountlogindeniedthrottle = EResult.Eresultaccountlogindeniedthrottle;
        
        /// <summary>
        /// two factor code mismatch
        /// </summary>
        public const Networking.EResult Eresulttwofactorcodemismatch = EResult.Eresulttwofactorcodemismatch;
        
        /// <summary>
        /// activation code for two-factor didn't match
        /// </summary>
        public const Networking.EResult Eresulttwofactoractivationcodemismatch = EResult.Eresulttwofactoractivationcodemismatch;
        
        /// <summary>
        /// account has been associated with multiple partners
        /// </summary>
        public const Networking.EResult Eresultaccountassociatedtomultiplepartners = EResult.Eresultaccountassociatedtomultiplepartners;
        
        /// <summary>
        /// data not modified
        /// </summary>
        public const Networking.EResult Eresultnotmodified = EResult.Eresultnotmodified;
        
        /// <summary>
        /// the account does not have a mobile device associated with it
        /// </summary>
        public const Networking.EResult Eresultnomobiledevice = EResult.Eresultnomobiledevice;
        
        /// <summary>
        /// the time presented is out of range or tolerance
        /// </summary>
        public const Networking.EResult Eresulttimenotsynced = EResult.Eresulttimenotsynced;
        
        /// <summary>
        /// SMS code failure (no match, none pending, etc.)
        /// </summary>
        public const Networking.EResult Eresultsmscodefailed = EResult.Eresultsmscodefailed;
        
        /// <summary>
        /// Too many accounts access this resource
        /// </summary>
        public const Networking.EResult Eresultaccountlimitexceeded = EResult.Eresultaccountlimitexceeded;
        
        /// <summary>
        /// Too many changes to this account
        /// </summary>
        public const Networking.EResult Eresultaccountactivitylimitexceeded = EResult.Eresultaccountactivitylimitexceeded;
        
        /// <summary>
        /// Too many changes to this phone
        /// </summary>
        public const Networking.EResult Eresultphoneactivitylimitexceeded = EResult.Eresultphoneactivitylimitexceeded;
        
        /// <summary>
        /// Cannot refund to payment method, must use wallet
        /// </summary>
        public const Networking.EResult Eresultrefundtowallet = EResult.Eresultrefundtowallet;
        
        /// <summary>
        /// Cannot send an email
        /// </summary>
        public const Networking.EResult Eresultemailsendfailure = EResult.Eresultemailsendfailure;
        
        /// <summary>
        /// Can't perform operation till payment has settled
        /// </summary>
        public const Networking.EResult Eresultnotsettled = EResult.Eresultnotsettled;
        
        /// <summary>
        /// Needs to provide a valid captcha
        /// </summary>
        public const Networking.EResult Eresultneedcaptcha = EResult.Eresultneedcaptcha;
        
        /// <summary>
        /// a game server login token owned by this token's owner has been banned
        /// </summary>
        public const Networking.EResult Eresultgsltdenied = EResult.Eresultgsltdenied;
        
        /// <summary>
        /// game server owner is denied for other reason (account lock, community ban, vac ban, missing phone)
        /// </summary>
        public const Networking.EResult Eresultgsownerdenied = EResult.Eresultgsownerdenied;
        
        /// <summary>
        /// the type of thing we were requested to act on is invalid
        /// </summary>
        public const Networking.EResult Eresultinvaliditemtype = EResult.Eresultinvaliditemtype;
        
        /// <summary>
        /// the ip address has been banned from taking this action
        /// </summary>
        public const Networking.EResult Eresultipbanned = EResult.Eresultipbanned;
        
        /// <summary>
        /// this token has expired from disuse; can be reset for use
        /// </summary>
        public const Networking.EResult Eresultgsltexpired = EResult.Eresultgsltexpired;
        
        /// <summary>
        /// user doesn't have enough wallet funds to complete the action
        /// </summary>
        public const Networking.EResult Eresultinsufficientfunds = EResult.Eresultinsufficientfunds;
        
        /// <summary>
        /// There are too many of this thing pending already
        /// </summary>
        public const Networking.EResult Eresulttoomanypending = EResult.Eresulttoomanypending;
        
        /// <summary>
        /// No site licenses found
        /// </summary>
        public const Networking.EResult Eresultnositelicensesfound = EResult.Eresultnositelicensesfound;
        
        /// <summary>
        /// the WG couldn't send a response because we exceeded max network send size
        /// </summary>
        public const Networking.EResult Eresultwgnetworksendexceeded = EResult.Eresultwgnetworksendexceeded;
        
        /// <summary>
        /// the user is not mutually friends
        /// </summary>
        public const Networking.EResult Eresultaccountnotfriends = EResult.Eresultaccountnotfriends;
        
        /// <summary>
        /// the user is limited
        /// </summary>
        public const Networking.EResult Eresultlimiteduseraccount = EResult.Eresultlimiteduseraccount;
        
        /// <summary>
        /// item can't be removed
        /// </summary>
        public const Networking.EResult Eresultcantremoveitem = EResult.Eresultcantremoveitem;
        
        /// <summary>
        /// account has been deleted
        /// </summary>
        public const Networking.EResult Eresultaccountdeleted = EResult.Eresultaccountdeleted;
        
        /// <summary>
        /// A license for this already exists, but cancelled
        /// </summary>
        public const Networking.EResult Eresultexistingusercancelledlicense = EResult.Eresultexistingusercancelledlicense;
        
        /// <summary>
        /// access is denied because of a community cooldown (probably from support profile data resets)
        /// </summary>
        public const Networking.EResult Eresultcommunitycooldown = EResult.Eresultcommunitycooldown;
        
        /// <summary>
        /// No launcher was specified, but a launcher was needed to choose correct realm for operation.
        /// </summary>
        public const Networking.EResult Eresultnolauncherspecified = EResult.Eresultnolauncherspecified;
        
        /// <summary>
        /// User must agree to china SSA or global SSA before login
        /// </summary>
        public const Networking.EResult Eresultmustagreetossa = EResult.Eresultmustagreetossa;
        
        /// <summary>
        /// The specified launcher type is no longer supported; the user should be directed elsewhere
        /// </summary>
        public const Networking.EResult Eresultlaunchermigrated = EResult.Eresultlaunchermigrated;
        
        /// <summary>
        /// The user's realm does not match the realm of the requested resource
        /// </summary>
        public const Networking.EResult Eresultsteamrealmmismatch = EResult.Eresultsteamrealmmismatch;
        
        /// <summary>
        /// signature check did not match
        /// </summary>
        public const Networking.EResult Eresultinvalidsignature = EResult.Eresultinvalidsignature;
        
        /// <summary>
        /// Failed to parse input
        /// </summary>
        public const Networking.EResult Eresultparsefailure = EResult.Eresultparsefailure;
        
        /// <summary>
        /// account does not have a verified phone number
        /// </summary>
        public const Networking.EResult Eresultnoverifiedphone = EResult.Eresultnoverifiedphone;
        
        /// <summary>
        /// Error codes for use with the voice functions
        /// </summary>
        public enum EVoiceResult : int
        {
            Evoiceresultok = unchecked((int)0),
            
            Evoiceresultnotinitialized = unchecked((int)1),
            
            Evoiceresultnotrecording = unchecked((int)2),
            
            Evoiceresultnodata = unchecked((int)3),
            
            Evoiceresultbuffertoosmall = unchecked((int)4),
            
            Evoiceresultdatacorrupted = unchecked((int)5),
            
            Evoiceresultrestricted = unchecked((int)6),
            
            Evoiceresultunsupportedcodec = unchecked((int)7),
            
            Evoiceresultreceiveroutofdate = unchecked((int)8),
            
            Evoiceresultreceiverdidnotanswer = unchecked((int)9),
        }
        
        public const Networking.EVoiceResult Evoiceresultok = EVoiceResult.Evoiceresultok;
        
        public const Networking.EVoiceResult Evoiceresultnotinitialized = EVoiceResult.Evoiceresultnotinitialized;
        
        public const Networking.EVoiceResult Evoiceresultnotrecording = EVoiceResult.Evoiceresultnotrecording;
        
        public const Networking.EVoiceResult Evoiceresultnodata = EVoiceResult.Evoiceresultnodata;
        
        public const Networking.EVoiceResult Evoiceresultbuffertoosmall = EVoiceResult.Evoiceresultbuffertoosmall;
        
        public const Networking.EVoiceResult Evoiceresultdatacorrupted = EVoiceResult.Evoiceresultdatacorrupted;
        
        public const Networking.EVoiceResult Evoiceresultrestricted = EVoiceResult.Evoiceresultrestricted;
        
        public const Networking.EVoiceResult Evoiceresultunsupportedcodec = EVoiceResult.Evoiceresultunsupportedcodec;
        
        public const Networking.EVoiceResult Evoiceresultreceiveroutofdate = EVoiceResult.Evoiceresultreceiveroutofdate;
        
        public const Networking.EVoiceResult Evoiceresultreceiverdidnotanswer = EVoiceResult.Evoiceresultreceiverdidnotanswer;
        
        /// <summary>
        /// Result codes to GSHandleClientDeny/Kick
        /// </summary>
        public enum EDenyReason : int
        {
            Edenyinvalid = unchecked((int)0),
            
            Edenyinvalidversion = unchecked((int)1),
            
            Edenygeneric = unchecked((int)2),
            
            Edenynotloggedon = unchecked((int)3),
            
            Edenynolicense = unchecked((int)4),
            
            Edenycheater = unchecked((int)5),
            
            Edenyloggedinelsewhere = unchecked((int)6),
            
            Edenyunknowntext = unchecked((int)7),
            
            Edenyincompatibleanticheat = unchecked((int)8),
            
            Edenymemorycorruption = unchecked((int)9),
            
            Edenyincompatiblesoftware = unchecked((int)10),
            
            Edenysteamconnectionlost = unchecked((int)11),
            
            Edenysteamconnectionerror = unchecked((int)12),
            
            Edenysteamresponsetimedout = unchecked((int)13),
            
            Edenysteamvalidationstalled = unchecked((int)14),
            
            Edenysteamownerleftguestuser = unchecked((int)15),
        }
        
        public const Networking.EDenyReason Edenyinvalid = EDenyReason.Edenyinvalid;
        
        public const Networking.EDenyReason Edenyinvalidversion = EDenyReason.Edenyinvalidversion;
        
        public const Networking.EDenyReason Edenygeneric = EDenyReason.Edenygeneric;
        
        public const Networking.EDenyReason Edenynotloggedon = EDenyReason.Edenynotloggedon;
        
        public const Networking.EDenyReason Edenynolicense = EDenyReason.Edenynolicense;
        
        public const Networking.EDenyReason Edenycheater = EDenyReason.Edenycheater;
        
        public const Networking.EDenyReason Edenyloggedinelsewhere = EDenyReason.Edenyloggedinelsewhere;
        
        public const Networking.EDenyReason Edenyunknowntext = EDenyReason.Edenyunknowntext;
        
        public const Networking.EDenyReason Edenyincompatibleanticheat = EDenyReason.Edenyincompatibleanticheat;
        
        public const Networking.EDenyReason Edenymemorycorruption = EDenyReason.Edenymemorycorruption;
        
        public const Networking.EDenyReason Edenyincompatiblesoftware = EDenyReason.Edenyincompatiblesoftware;
        
        public const Networking.EDenyReason Edenysteamconnectionlost = EDenyReason.Edenysteamconnectionlost;
        
        public const Networking.EDenyReason Edenysteamconnectionerror = EDenyReason.Edenysteamconnectionerror;
        
        public const Networking.EDenyReason Edenysteamresponsetimedout = EDenyReason.Edenysteamresponsetimedout;
        
        public const Networking.EDenyReason Edenysteamvalidationstalled = EDenyReason.Edenysteamvalidationstalled;
        
        public const Networking.EDenyReason Edenysteamownerleftguestuser = EDenyReason.Edenysteamownerleftguestuser;
        
        /// <summary>
        /// results from BeginAuthSession
        /// </summary>
        public enum EBeginAuthSessionResult : int
        {
            /// <summary>
            /// Ticket is valid for this game and this steamID.
            /// </summary>
            Ebeginauthsessionresultok = unchecked((int)0),
            
            /// <summary>
            /// Ticket is not valid.
            /// </summary>
            Ebeginauthsessionresultinvalidticket = unchecked((int)1),
            
            /// <summary>
            /// A ticket has already been submitted for this steamID
            /// </summary>
            Ebeginauthsessionresultduplicaterequest = unchecked((int)2),
            
            /// <summary>
            /// Ticket is from an incompatible interface version
            /// </summary>
            Ebeginauthsessionresultinvalidversion = unchecked((int)3),
            
            /// <summary>
            /// Ticket is not for this game
            /// </summary>
            Ebeginauthsessionresultgamemismatch = unchecked((int)4),
            
            /// <summary>
            /// Ticket has expired
            /// </summary>
            Ebeginauthsessionresultexpiredticket = unchecked((int)5),
        }
        
        /// <summary>
        /// Ticket is valid for this game and this steamID.
        /// </summary>
        public const Networking.EBeginAuthSessionResult Ebeginauthsessionresultok = EBeginAuthSessionResult.Ebeginauthsessionresultok;
        
        /// <summary>
        /// Ticket is not valid.
        /// </summary>
        public const Networking.EBeginAuthSessionResult Ebeginauthsessionresultinvalidticket = EBeginAuthSessionResult.Ebeginauthsessionresultinvalidticket;
        
        /// <summary>
        /// A ticket has already been submitted for this steamID
        /// </summary>
        public const Networking.EBeginAuthSessionResult Ebeginauthsessionresultduplicaterequest = EBeginAuthSessionResult.Ebeginauthsessionresultduplicaterequest;
        
        /// <summary>
        /// Ticket is from an incompatible interface version
        /// </summary>
        public const Networking.EBeginAuthSessionResult Ebeginauthsessionresultinvalidversion = EBeginAuthSessionResult.Ebeginauthsessionresultinvalidversion;
        
        /// <summary>
        /// Ticket is not for this game
        /// </summary>
        public const Networking.EBeginAuthSessionResult Ebeginauthsessionresultgamemismatch = EBeginAuthSessionResult.Ebeginauthsessionresultgamemismatch;
        
        /// <summary>
        /// Ticket has expired
        /// </summary>
        public const Networking.EBeginAuthSessionResult Ebeginauthsessionresultexpiredticket = EBeginAuthSessionResult.Ebeginauthsessionresultexpiredticket;
        
        /// <summary>
        /// Callback values for callback ValidateAuthTicketResponse_t which is a response to BeginAuthSession
        /// </summary>
        public enum EAuthSessionResponse : int
        {
            /// <summary>
            /// Steam has verified the user is online, the ticket is valid and ticket has not been reused.
            /// </summary>
            Eauthsessionresponseok = unchecked((int)0),
            
            /// <summary>
            /// The user in question is not connected to steam
            /// </summary>
            Eauthsessionresponseusernotconnectedtosteam = unchecked((int)1),
            
            /// <summary>
            /// The license has expired.
            /// </summary>
            Eauthsessionresponsenolicenseorexpired = unchecked((int)2),
            
            /// <summary>
            /// The user is VAC banned for this game.
            /// </summary>
            Eauthsessionresponsevacbanned = unchecked((int)3),
            
            /// <summary>
            /// The user account has logged in elsewhere and the session containing the game instance has been disconnected.
            /// </summary>
            Eauthsessionresponseloggedinelsewhere = unchecked((int)4),
            
            /// <summary>
            /// VAC has been unable to perform anti-cheat checks on this user
            /// </summary>
            Eauthsessionresponsevacchecktimedout = unchecked((int)5),
            
            /// <summary>
            /// The ticket has been canceled by the issuer
            /// </summary>
            Eauthsessionresponseauthticketcanceled = unchecked((int)6),
            
            /// <summary>
            /// This ticket has already been used, it is not valid.
            /// </summary>
            Eauthsessionresponseauthticketinvalidalreadyused = unchecked((int)7),
            
            /// <summary>
            /// This ticket is not from a user instance currently connected to steam.
            /// </summary>
            Eauthsessionresponseauthticketinvalid = unchecked((int)8),
            
            /// <summary>
            /// The user is banned for this game. The ban came via the web api and not VAC
            /// </summary>
            Eauthsessionresponsepublisherissuedban = unchecked((int)9),
        }
        
        /// <summary>
        /// Steam has verified the user is online, the ticket is valid and ticket has not been reused.
        /// </summary>
        public const Networking.EAuthSessionResponse Eauthsessionresponseok = EAuthSessionResponse.Eauthsessionresponseok;
        
        /// <summary>
        /// The user in question is not connected to steam
        /// </summary>
        public const Networking.EAuthSessionResponse Eauthsessionresponseusernotconnectedtosteam = EAuthSessionResponse.Eauthsessionresponseusernotconnectedtosteam;
        
        /// <summary>
        /// The license has expired.
        /// </summary>
        public const Networking.EAuthSessionResponse Eauthsessionresponsenolicenseorexpired = EAuthSessionResponse.Eauthsessionresponsenolicenseorexpired;
        
        /// <summary>
        /// The user is VAC banned for this game.
        /// </summary>
        public const Networking.EAuthSessionResponse Eauthsessionresponsevacbanned = EAuthSessionResponse.Eauthsessionresponsevacbanned;
        
        /// <summary>
        /// The user account has logged in elsewhere and the session containing the game instance has been disconnected.
        /// </summary>
        public const Networking.EAuthSessionResponse Eauthsessionresponseloggedinelsewhere = EAuthSessionResponse.Eauthsessionresponseloggedinelsewhere;
        
        /// <summary>
        /// VAC has been unable to perform anti-cheat checks on this user
        /// </summary>
        public const Networking.EAuthSessionResponse Eauthsessionresponsevacchecktimedout = EAuthSessionResponse.Eauthsessionresponsevacchecktimedout;
        
        /// <summary>
        /// The ticket has been canceled by the issuer
        /// </summary>
        public const Networking.EAuthSessionResponse Eauthsessionresponseauthticketcanceled = EAuthSessionResponse.Eauthsessionresponseauthticketcanceled;
        
        /// <summary>
        /// This ticket has already been used, it is not valid.
        /// </summary>
        public const Networking.EAuthSessionResponse Eauthsessionresponseauthticketinvalidalreadyused = EAuthSessionResponse.Eauthsessionresponseauthticketinvalidalreadyused;
        
        /// <summary>
        /// This ticket is not from a user instance currently connected to steam.
        /// </summary>
        public const Networking.EAuthSessionResponse Eauthsessionresponseauthticketinvalid = EAuthSessionResponse.Eauthsessionresponseauthticketinvalid;
        
        /// <summary>
        /// The user is banned for this game. The ban came via the web api and not VAC
        /// </summary>
        public const Networking.EAuthSessionResponse Eauthsessionresponsepublisherissuedban = EAuthSessionResponse.Eauthsessionresponsepublisherissuedban;
        
        /// <summary>
        /// results from UserHasLicenseForApp
        /// </summary>
        public enum EUserHasLicenseForAppResult : int
        {
            /// <summary>
            /// User has a license for specified app
            /// </summary>
            Euserhaslicenseresulthaslicense = unchecked((int)0),
            
            /// <summary>
            /// User does not have a license for the specified app
            /// </summary>
            Euserhaslicenseresultdoesnothavelicense = unchecked((int)1),
            
            /// <summary>
            /// User has not been authenticated
            /// </summary>
            Euserhaslicenseresultnoauth = unchecked((int)2),
        }
        
        /// <summary>
        /// User has a license for specified app
        /// </summary>
        public const Networking.EUserHasLicenseForAppResult Euserhaslicenseresulthaslicense = EUserHasLicenseForAppResult.Euserhaslicenseresulthaslicense;
        
        /// <summary>
        /// User does not have a license for the specified app
        /// </summary>
        public const Networking.EUserHasLicenseForAppResult Euserhaslicenseresultdoesnothavelicense = EUserHasLicenseForAppResult.Euserhaslicenseresultdoesnothavelicense;
        
        /// <summary>
        /// User has not been authenticated
        /// </summary>
        public const Networking.EUserHasLicenseForAppResult Euserhaslicenseresultnoauth = EUserHasLicenseForAppResult.Euserhaslicenseresultnoauth;
        
        /// <summary>
        /// Steam account types
        /// </summary>
        public enum EAccountType : int
        {
            Eaccounttypeinvalid = unchecked((int)0),
            
            /// <summary>
            /// single user account
            /// </summary>
            Eaccounttypeindividual = unchecked((int)1),
            
            /// <summary>
            /// multiseat (e.g. cybercafe) account
            /// </summary>
            Eaccounttypemultiseat = unchecked((int)2),
            
            /// <summary>
            /// game server account
            /// </summary>
            Eaccounttypegameserver = unchecked((int)3),
            
            /// <summary>
            /// anonymous game server account
            /// </summary>
            Eaccounttypeanongameserver = unchecked((int)4),
            
            /// <summary>
            /// pending
            /// </summary>
            Eaccounttypepending = unchecked((int)5),
            
            /// <summary>
            /// content server
            /// </summary>
            Eaccounttypecontentserver = unchecked((int)6),
            
            Eaccounttypeclan = unchecked((int)7),
            
            Eaccounttypechat = unchecked((int)8),
            
            /// <summary>
            /// Fake SteamID for local PSN account on PS3 or Live account on 360, etc.
            /// </summary>
            Eaccounttypeconsoleuser = unchecked((int)9),
            
            Eaccounttypeanonuser = unchecked((int)10),
            
            /// <summary>
            /// Max of 16 items in this field
            /// </summary>
            Eaccounttypemax,
        }
        
        public const Networking.EAccountType Eaccounttypeinvalid = EAccountType.Eaccounttypeinvalid;
        
        /// <summary>
        /// single user account
        /// </summary>
        public const Networking.EAccountType Eaccounttypeindividual = EAccountType.Eaccounttypeindividual;
        
        /// <summary>
        /// multiseat (e.g. cybercafe) account
        /// </summary>
        public const Networking.EAccountType Eaccounttypemultiseat = EAccountType.Eaccounttypemultiseat;
        
        /// <summary>
        /// game server account
        /// </summary>
        public const Networking.EAccountType Eaccounttypegameserver = EAccountType.Eaccounttypegameserver;
        
        /// <summary>
        /// anonymous game server account
        /// </summary>
        public const Networking.EAccountType Eaccounttypeanongameserver = EAccountType.Eaccounttypeanongameserver;
        
        /// <summary>
        /// pending
        /// </summary>
        public const Networking.EAccountType Eaccounttypepending = EAccountType.Eaccounttypepending;
        
        /// <summary>
        /// content server
        /// </summary>
        public const Networking.EAccountType Eaccounttypecontentserver = EAccountType.Eaccounttypecontentserver;
        
        public const Networking.EAccountType Eaccounttypeclan = EAccountType.Eaccounttypeclan;
        
        public const Networking.EAccountType Eaccounttypechat = EAccountType.Eaccounttypechat;
        
        /// <summary>
        /// Fake SteamID for local PSN account on PS3 or Live account on 360, etc.
        /// </summary>
        public const Networking.EAccountType Eaccounttypeconsoleuser = EAccountType.Eaccounttypeconsoleuser;
        
        public const Networking.EAccountType Eaccounttypeanonuser = EAccountType.Eaccounttypeanonuser;
        
        /// <summary>
        /// Max of 16 items in this field
        /// </summary>
        public const Networking.EAccountType Eaccounttypemax = EAccountType.Eaccounttypemax;
        
        /// <summary>
        /// -----------------------------------------------------------------------------
        /// Purpose: Chat Entry Types (previously was only friend-to-friend message types)
        /// -----------------------------------------------------------------------------
        /// </summary>
        public enum EChatEntryType : int
        {
            Echatentrytypeinvalid = unchecked((int)0),
            
            /// <summary>
            /// Normal text message from another user
            /// </summary>
            Echatentrytypechatmsg = unchecked((int)1),
            
            /// <summary>
            /// Another user is typing (not used in multi-user chat)
            /// </summary>
            Echatentrytypetyping = unchecked((int)2),
            
            /// <summary>
            /// Invite from other user into that users current game
            /// </summary>
            Echatentrytypeinvitegame = unchecked((int)3),
            
            /// <summary>
            /// text emote message (deprecated, should be treated as ChatMsg)
            /// </summary>
            Echatentrytypeemote = unchecked((int)4),
            
            /// <summary>
            /// user has left the conversation ( closed chat window )
            /// </summary>
            Echatentrytypeleftconversation = unchecked((int)6),
            
            /// <summary>
            /// user has entered the conversation (used in multi-user chat and group chat)
            /// </summary>
            Echatentrytypeentered = unchecked((int)7),
            
            /// <summary>
            /// user was kicked (data: 64-bit steamid of actor performing the kick)
            /// </summary>
            Echatentrytypewaskicked = unchecked((int)8),
            
            /// <summary>
            /// user was banned (data: 64-bit steamid of actor performing the ban)
            /// </summary>
            Echatentrytypewasbanned = unchecked((int)9),
            
            /// <summary>
            /// user disconnected
            /// </summary>
            Echatentrytypedisconnected = unchecked((int)10),
            
            /// <summary>
            /// a chat message from user's chat history or offilne message
            /// </summary>
            Echatentrytypehistoricalchat = unchecked((int)11),
            
            /// <summary>
            /// a link was removed by the chat filter.
            /// </summary>
            Echatentrytypelinkblocked = unchecked((int)14),
        }
        
        public const Networking.EChatEntryType Echatentrytypeinvalid = EChatEntryType.Echatentrytypeinvalid;
        
        /// <summary>
        /// Normal text message from another user
        /// </summary>
        public const Networking.EChatEntryType Echatentrytypechatmsg = EChatEntryType.Echatentrytypechatmsg;
        
        /// <summary>
        /// Another user is typing (not used in multi-user chat)
        /// </summary>
        public const Networking.EChatEntryType Echatentrytypetyping = EChatEntryType.Echatentrytypetyping;
        
        /// <summary>
        /// Invite from other user into that users current game
        /// </summary>
        public const Networking.EChatEntryType Echatentrytypeinvitegame = EChatEntryType.Echatentrytypeinvitegame;
        
        /// <summary>
        /// text emote message (deprecated, should be treated as ChatMsg)
        /// </summary>
        public const Networking.EChatEntryType Echatentrytypeemote = EChatEntryType.Echatentrytypeemote;
        
        /// <summary>
        /// user has left the conversation ( closed chat window )
        /// </summary>
        public const Networking.EChatEntryType Echatentrytypeleftconversation = EChatEntryType.Echatentrytypeleftconversation;
        
        /// <summary>
        /// user has entered the conversation (used in multi-user chat and group chat)
        /// </summary>
        public const Networking.EChatEntryType Echatentrytypeentered = EChatEntryType.Echatentrytypeentered;
        
        /// <summary>
        /// user was kicked (data: 64-bit steamid of actor performing the kick)
        /// </summary>
        public const Networking.EChatEntryType Echatentrytypewaskicked = EChatEntryType.Echatentrytypewaskicked;
        
        /// <summary>
        /// user was banned (data: 64-bit steamid of actor performing the ban)
        /// </summary>
        public const Networking.EChatEntryType Echatentrytypewasbanned = EChatEntryType.Echatentrytypewasbanned;
        
        /// <summary>
        /// user disconnected
        /// </summary>
        public const Networking.EChatEntryType Echatentrytypedisconnected = EChatEntryType.Echatentrytypedisconnected;
        
        /// <summary>
        /// a chat message from user's chat history or offilne message
        /// </summary>
        public const Networking.EChatEntryType Echatentrytypehistoricalchat = EChatEntryType.Echatentrytypehistoricalchat;
        
        /// <summary>
        /// a link was removed by the chat filter.
        /// </summary>
        public const Networking.EChatEntryType Echatentrytypelinkblocked = EChatEntryType.Echatentrytypelinkblocked;
        
        /// <summary>
        /// -----------------------------------------------------------------------------
        /// Purpose: Chat Room Enter Responses
        /// -----------------------------------------------------------------------------
        /// </summary>
        public enum EChatRoomEnterResponse : int
        {
            /// <summary>
            /// Success
            /// </summary>
            Echatroomenterresponsesuccess = unchecked((int)1),
            
            /// <summary>
            /// Chat doesn't exist (probably closed)
            /// </summary>
            Echatroomenterresponsedoesntexist = unchecked((int)2),
            
            /// <summary>
            /// General Denied - You don't have the permissions needed to join the chat
            /// </summary>
            Echatroomenterresponsenotallowed = unchecked((int)3),
            
            /// <summary>
            /// Chat room has reached its maximum size
            /// </summary>
            Echatroomenterresponsefull = unchecked((int)4),
            
            /// <summary>
            /// Unexpected Error
            /// </summary>
            Echatroomenterresponseerror = unchecked((int)5),
            
            /// <summary>
            /// You are banned from this chat room and may not join
            /// </summary>
            Echatroomenterresponsebanned = unchecked((int)6),
            
            /// <summary>
            /// Joining this chat is not allowed because you are a limited user (no value on account)
            /// </summary>
            Echatroomenterresponselimited = unchecked((int)7),
            
            /// <summary>
            /// Attempt to join a clan chat when the clan is locked or disabled
            /// </summary>
            Echatroomenterresponseclandisabled = unchecked((int)8),
            
            /// <summary>
            /// Attempt to join a chat when the user has a community lock on their account
            /// </summary>
            Echatroomenterresponsecommunityban = unchecked((int)9),
            
            /// <summary>
            /// Join failed - some member in the chat has blocked you from joining
            /// </summary>
            Echatroomenterresponsememberblockedyou = unchecked((int)10),
            
            /// <summary>
            /// Join failed - you have blocked some member already in the chat
            /// </summary>
            Echatroomenterresponseyoublockedmember = unchecked((int)11),
            
            /// <summary>
            /// Join failed - to many join attempts in a very short period of time
            /// </summary>
            Echatroomenterresponseratelimitexceeded = unchecked((int)15),
        }
        
        /// <summary>
        /// Success
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponsesuccess = EChatRoomEnterResponse.Echatroomenterresponsesuccess;
        
        /// <summary>
        /// Chat doesn't exist (probably closed)
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponsedoesntexist = EChatRoomEnterResponse.Echatroomenterresponsedoesntexist;
        
        /// <summary>
        /// General Denied - You don't have the permissions needed to join the chat
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponsenotallowed = EChatRoomEnterResponse.Echatroomenterresponsenotallowed;
        
        /// <summary>
        /// Chat room has reached its maximum size
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponsefull = EChatRoomEnterResponse.Echatroomenterresponsefull;
        
        /// <summary>
        /// Unexpected Error
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponseerror = EChatRoomEnterResponse.Echatroomenterresponseerror;
        
        /// <summary>
        /// You are banned from this chat room and may not join
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponsebanned = EChatRoomEnterResponse.Echatroomenterresponsebanned;
        
        /// <summary>
        /// Joining this chat is not allowed because you are a limited user (no value on account)
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponselimited = EChatRoomEnterResponse.Echatroomenterresponselimited;
        
        /// <summary>
        /// Attempt to join a clan chat when the clan is locked or disabled
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponseclandisabled = EChatRoomEnterResponse.Echatroomenterresponseclandisabled;
        
        /// <summary>
        /// Attempt to join a chat when the user has a community lock on their account
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponsecommunityban = EChatRoomEnterResponse.Echatroomenterresponsecommunityban;
        
        /// <summary>
        /// Join failed - some member in the chat has blocked you from joining
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponsememberblockedyou = EChatRoomEnterResponse.Echatroomenterresponsememberblockedyou;
        
        /// <summary>
        /// Join failed - you have blocked some member already in the chat
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponseyoublockedmember = EChatRoomEnterResponse.Echatroomenterresponseyoublockedmember;
        
        /// <summary>
        /// Join failed - to many join attempts in a very short period of time
        /// </summary>
        public const Networking.EChatRoomEnterResponse Echatroomenterresponseratelimitexceeded = EChatRoomEnterResponse.Echatroomenterresponseratelimitexceeded;
        
        /// <summary>
        /// Special flags for Chat accounts - they go in the top 8 bits
        /// of the steam ID's "instance", leaving 12 for the actual instances
        /// </summary>
        public enum EChatSteamIDInstanceFlags : int
        {
            /// <summary>
            /// top 8 bits are flags
            /// </summary>
            Echataccountinstancemask = unchecked((int)0x00000FFF),
            
            /// <summary>
            /// top bit
            /// </summary>
            Echatinstanceflagclan = unchecked((int)(k_unSteamAccountInstanceMask+1)>>1),
            
            /// <summary>
            /// next one down, etc
            /// </summary>
            Echatinstanceflaglobby = unchecked((int)(k_unSteamAccountInstanceMask+1)>>2),
            
            /// <summary>
            /// next one down, etc
            /// </summary>
            Echatinstanceflagmmslobby = unchecked((int)(k_unSteamAccountInstanceMask+1)>>3),
        }
        
        /// <summary>
        /// top 8 bits are flags
        /// </summary>
        public const Networking.EChatSteamIDInstanceFlags Echataccountinstancemask = EChatSteamIDInstanceFlags.Echataccountinstancemask;
        
        /// <summary>
        /// top bit
        /// </summary>
        public const Networking.EChatSteamIDInstanceFlags Echatinstanceflagclan = EChatSteamIDInstanceFlags.Echatinstanceflagclan;
        
        /// <summary>
        /// next one down, etc
        /// </summary>
        public const Networking.EChatSteamIDInstanceFlags Echatinstanceflaglobby = EChatSteamIDInstanceFlags.Echatinstanceflaglobby;
        
        /// <summary>
        /// next one down, etc
        /// </summary>
        public const Networking.EChatSteamIDInstanceFlags Echatinstanceflagmmslobby = EChatSteamIDInstanceFlags.Echatinstanceflagmmslobby;
        
        /// <summary>
        /// -----------------------------------------------------------------------------
        /// Purpose: Possible positions to tell the overlay to show notifications in
        /// -----------------------------------------------------------------------------
        /// </summary>
        public enum ENotificationPosition : int
        {
            Epositiontopleft = unchecked((int)0),
            
            Epositiontopright = unchecked((int)1),
            
            Epositionbottomleft = unchecked((int)2),
            
            Epositionbottomright = unchecked((int)3),
        }
        
        public const Networking.ENotificationPosition Epositiontopleft = ENotificationPosition.Epositiontopleft;
        
        public const Networking.ENotificationPosition Epositiontopright = ENotificationPosition.Epositiontopright;
        
        public const Networking.ENotificationPosition Epositionbottomleft = ENotificationPosition.Epositionbottomleft;
        
        public const Networking.ENotificationPosition Epositionbottomright = ENotificationPosition.Epositionbottomright;
        
        /// <summary>
        /// -----------------------------------------------------------------------------
        /// Purpose: Broadcast upload result details
        /// -----------------------------------------------------------------------------
        /// </summary>
        public enum EBroadcastUploadResult : int
        {
            /// <summary>
            /// broadcast state unknown
            /// </summary>
            Ebroadcastuploadresultnone = unchecked((int)0),
            
            /// <summary>
            /// broadcast was good, no problems
            /// </summary>
            Ebroadcastuploadresultok = unchecked((int)1),
            
            /// <summary>
            /// broadcast init failed
            /// </summary>
            Ebroadcastuploadresultinitfailed = unchecked((int)2),
            
            /// <summary>
            /// broadcast frame upload failed
            /// </summary>
            Ebroadcastuploadresultframefailed = unchecked((int)3),
            
            /// <summary>
            /// broadcast upload timed out
            /// </summary>
            Ebroadcastuploadresulttimeout = unchecked((int)4),
            
            /// <summary>
            /// broadcast send too much data
            /// </summary>
            Ebroadcastuploadresultbandwidthexceeded = unchecked((int)5),
            
            /// <summary>
            /// broadcast FPS too low
            /// </summary>
            Ebroadcastuploadresultlowfps = unchecked((int)6),
            
            /// <summary>
            /// broadcast sending not enough key frames
            /// </summary>
            Ebroadcastuploadresultmissingkeyframes = unchecked((int)7),
            
            /// <summary>
            /// broadcast client failed to connect to relay
            /// </summary>
            Ebroadcastuploadresultnoconnection = unchecked((int)8),
            
            /// <summary>
            /// relay dropped the upload
            /// </summary>
            Ebroadcastuploadresultrelayfailed = unchecked((int)9),
            
            /// <summary>
            /// the client changed broadcast settings
            /// </summary>
            Ebroadcastuploadresultsettingschanged = unchecked((int)10),
            
            /// <summary>
            /// client failed to send audio data
            /// </summary>
            Ebroadcastuploadresultmissingaudio = unchecked((int)11),
            
            /// <summary>
            /// clients was too slow uploading
            /// </summary>
            Ebroadcastuploadresulttoofarbehind = unchecked((int)12),
            
            /// <summary>
            /// server failed to keep up with transcode
            /// </summary>
            Ebroadcastuploadresulttranscodebehind = unchecked((int)13),
            
            /// <summary>
            /// Broadcast does not have permissions to play game
            /// </summary>
            Ebroadcastuploadresultnotallowedtoplay = unchecked((int)14),
            
            /// <summary>
            /// RTMP host to busy to take new broadcast stream, choose another
            /// </summary>
            Ebroadcastuploadresultbusy = unchecked((int)15),
            
            /// <summary>
            /// Account banned from community broadcast
            /// </summary>
            Ebroadcastuploadresultbanned = unchecked((int)16),
            
            /// <summary>
            /// We already already have an stream running.
            /// </summary>
            Ebroadcastuploadresultalreadyactive = unchecked((int)17),
            
            /// <summary>
            /// We explicitly shutting down a broadcast
            /// </summary>
            Ebroadcastuploadresultforcedoff = unchecked((int)18),
            
            /// <summary>
            /// Audio stream was too far behind video
            /// </summary>
            Ebroadcastuploadresultaudiobehind = unchecked((int)19),
            
            /// <summary>
            /// Broadcast Server was shut down
            /// </summary>
            Ebroadcastuploadresultshutdown = unchecked((int)20),
            
            /// <summary>
            /// broadcast uploader TCP disconnected
            /// </summary>
            Ebroadcastuploadresultdisconnect = unchecked((int)21),
            
            /// <summary>
            /// invalid video settings
            /// </summary>
            Ebroadcastuploadresultvideoinitfailed = unchecked((int)22),
            
            /// <summary>
            /// invalid audio settings
            /// </summary>
            Ebroadcastuploadresultaudioinitfailed = unchecked((int)23),
        }
        
        /// <summary>
        /// broadcast state unknown
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultnone = EBroadcastUploadResult.Ebroadcastuploadresultnone;
        
        /// <summary>
        /// broadcast was good, no problems
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultok = EBroadcastUploadResult.Ebroadcastuploadresultok;
        
        /// <summary>
        /// broadcast init failed
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultinitfailed = EBroadcastUploadResult.Ebroadcastuploadresultinitfailed;
        
        /// <summary>
        /// broadcast frame upload failed
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultframefailed = EBroadcastUploadResult.Ebroadcastuploadresultframefailed;
        
        /// <summary>
        /// broadcast upload timed out
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresulttimeout = EBroadcastUploadResult.Ebroadcastuploadresulttimeout;
        
        /// <summary>
        /// broadcast send too much data
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultbandwidthexceeded = EBroadcastUploadResult.Ebroadcastuploadresultbandwidthexceeded;
        
        /// <summary>
        /// broadcast FPS too low
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultlowfps = EBroadcastUploadResult.Ebroadcastuploadresultlowfps;
        
        /// <summary>
        /// broadcast sending not enough key frames
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultmissingkeyframes = EBroadcastUploadResult.Ebroadcastuploadresultmissingkeyframes;
        
        /// <summary>
        /// broadcast client failed to connect to relay
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultnoconnection = EBroadcastUploadResult.Ebroadcastuploadresultnoconnection;
        
        /// <summary>
        /// relay dropped the upload
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultrelayfailed = EBroadcastUploadResult.Ebroadcastuploadresultrelayfailed;
        
        /// <summary>
        /// the client changed broadcast settings
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultsettingschanged = EBroadcastUploadResult.Ebroadcastuploadresultsettingschanged;
        
        /// <summary>
        /// client failed to send audio data
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultmissingaudio = EBroadcastUploadResult.Ebroadcastuploadresultmissingaudio;
        
        /// <summary>
        /// clients was too slow uploading
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresulttoofarbehind = EBroadcastUploadResult.Ebroadcastuploadresulttoofarbehind;
        
        /// <summary>
        /// server failed to keep up with transcode
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresulttranscodebehind = EBroadcastUploadResult.Ebroadcastuploadresulttranscodebehind;
        
        /// <summary>
        /// Broadcast does not have permissions to play game
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultnotallowedtoplay = EBroadcastUploadResult.Ebroadcastuploadresultnotallowedtoplay;
        
        /// <summary>
        /// RTMP host to busy to take new broadcast stream, choose another
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultbusy = EBroadcastUploadResult.Ebroadcastuploadresultbusy;
        
        /// <summary>
        /// Account banned from community broadcast
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultbanned = EBroadcastUploadResult.Ebroadcastuploadresultbanned;
        
        /// <summary>
        /// We already already have an stream running.
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultalreadyactive = EBroadcastUploadResult.Ebroadcastuploadresultalreadyactive;
        
        /// <summary>
        /// We explicitly shutting down a broadcast
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultforcedoff = EBroadcastUploadResult.Ebroadcastuploadresultforcedoff;
        
        /// <summary>
        /// Audio stream was too far behind video
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultaudiobehind = EBroadcastUploadResult.Ebroadcastuploadresultaudiobehind;
        
        /// <summary>
        /// Broadcast Server was shut down
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultshutdown = EBroadcastUploadResult.Ebroadcastuploadresultshutdown;
        
        /// <summary>
        /// broadcast uploader TCP disconnected
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultdisconnect = EBroadcastUploadResult.Ebroadcastuploadresultdisconnect;
        
        /// <summary>
        /// invalid video settings
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultvideoinitfailed = EBroadcastUploadResult.Ebroadcastuploadresultvideoinitfailed;
        
        /// <summary>
        /// invalid audio settings
        /// </summary>
        public const Networking.EBroadcastUploadResult Ebroadcastuploadresultaudioinitfailed = EBroadcastUploadResult.Ebroadcastuploadresultaudioinitfailed;
        
        /// <summary>
        /// -----------------------------------------------------------------------------
        /// Purpose: Reasons a user may not use the Community Market.
        /// Used in MarketEligibilityResponse_t.
        /// -----------------------------------------------------------------------------
        /// </summary>
        [Flags]
        public enum EMarketNotAllowedReasonFlags : int
        {
            EmarketnotallowedreasonNone = unchecked((int)0),
            
            /// <summary>
            /// A back-end call failed or something that might work again on retry
            /// </summary>
            EmarketnotallowedreasonTemporaryfailure = unchecked((int)(1  << (int) 0)),
            
            /// <summary>
            /// Disabled account
            /// </summary>
            EmarketnotallowedreasonAccountdisabled = unchecked((int)(1  << (int) 1)),
            
            /// <summary>
            /// Locked account
            /// </summary>
            EmarketnotallowedreasonAccountlockeddown = unchecked((int)(1  << (int) 2)),
            
            /// <summary>
            /// Limited account (no purchases)
            /// </summary>
            EmarketnotallowedreasonAccountlimited = unchecked((int)(1  << (int) 3)),
            
            /// <summary>
            /// The account is banned from trading items
            /// </summary>
            EmarketnotallowedreasonTradebanned = unchecked((int)(1  << (int) 4)),
            
            /// <summary>
            /// Wallet funds aren't tradable because the user has had no purchase
            /// activity in the last year or has had no purchases prior to last month
            /// </summary>
            EmarketnotallowedreasonAccountnottrusted = unchecked((int)(1  << (int) 5)),
            
            /// <summary>
            /// The user doesn't have Steam Guard enabled
            /// </summary>
            EmarketnotallowedreasonSteamguardnotenabled = unchecked((int)(1  << (int) 6)),
            
            /// <summary>
            /// The user has Steam Guard, but it hasn't been enabled for the required
            /// number of days
            /// </summary>
            EmarketnotallowedreasonSteamguardonlyrecentlyenabled = unchecked((int)(1  << (int) 7)),
            
            /// <summary>
            /// The user has recently forgotten their password and reset it
            /// </summary>
            EmarketnotallowedreasonRecentpasswordreset = unchecked((int)(1  << (int) 8)),
            
            /// <summary>
            /// The user has recently funded his or her wallet with a new payment method
            /// </summary>
            EmarketnotallowedreasonNewpaymentmethod = unchecked((int)(1  << (int) 9)),
            
            /// <summary>
            /// An invalid cookie was sent by the user
            /// </summary>
            EmarketnotallowedreasonInvalidcookie = unchecked((int)(1  << (int) 10)),
            
            /// <summary>
            /// The user has Steam Guard, but is using a new computer or web browser
            /// </summary>
            EmarketnotallowedreasonUsingnewdevice = unchecked((int)(1  << (int) 11)),
            
            /// <summary>
            /// The user has recently refunded a store purchase by his or herself
            /// </summary>
            EmarketnotallowedreasonRecentselfrefund = unchecked((int)(1  << (int) 12)),
            
            /// <summary>
            /// The user has recently funded his or her wallet with a new payment method that cannot be verified
            /// </summary>
            EmarketnotallowedreasonNewpaymentmethodcannotbeverified = unchecked((int)(1  << (int) 13)),
            
            /// <summary>
            /// Not only is the account not trusted, but they have no recent purchases at all
            /// </summary>
            EmarketnotallowedreasonNorecentpurchases = unchecked((int)(1  << (int) 14)),
            
            /// <summary>
            /// User accepted a wallet gift that was recently purchased
            /// </summary>
            EmarketnotallowedreasonAcceptedwalletgift = unchecked((int)(1  << (int) 15)),
        }
        
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonNone = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonNone;
        
        /// <summary>
        /// A back-end call failed or something that might work again on retry
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonTemporaryfailure = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonTemporaryfailure;
        
        /// <summary>
        /// Disabled account
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonAccountdisabled = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonAccountdisabled;
        
        /// <summary>
        /// Locked account
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonAccountlockeddown = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonAccountlockeddown;
        
        /// <summary>
        /// Limited account (no purchases)
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonAccountlimited = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonAccountlimited;
        
        /// <summary>
        /// The account is banned from trading items
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonTradebanned = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonTradebanned;
        
        /// <summary>
        /// Wallet funds aren't tradable because the user has had no purchase
        /// activity in the last year or has had no purchases prior to last month
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonAccountnottrusted = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonAccountnottrusted;
        
        /// <summary>
        /// The user doesn't have Steam Guard enabled
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonSteamguardnotenabled = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonSteamguardnotenabled;
        
        /// <summary>
        /// The user has Steam Guard, but it hasn't been enabled for the required
        /// number of days
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonSteamguardonlyrecentlyenabled = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonSteamguardonlyrecentlyenabled;
        
        /// <summary>
        /// The user has recently forgotten their password and reset it
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonRecentpasswordreset = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonRecentpasswordreset;
        
        /// <summary>
        /// The user has recently funded his or her wallet with a new payment method
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonNewpaymentmethod = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonNewpaymentmethod;
        
        /// <summary>
        /// An invalid cookie was sent by the user
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonInvalidcookie = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonInvalidcookie;
        
        /// <summary>
        /// The user has Steam Guard, but is using a new computer or web browser
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonUsingnewdevice = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonUsingnewdevice;
        
        /// <summary>
        /// The user has recently refunded a store purchase by his or herself
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonRecentselfrefund = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonRecentselfrefund;
        
        /// <summary>
        /// The user has recently funded his or her wallet with a new payment method that cannot be verified
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonNewpaymentmethodcannotbeverified = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonNewpaymentmethodcannotbeverified;
        
        /// <summary>
        /// Not only is the account not trusted, but they have no recent purchases at all
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonNorecentpurchases = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonNorecentpurchases;
        
        /// <summary>
        /// User accepted a wallet gift that was recently purchased
        /// </summary>
        public const Networking.EMarketNotAllowedReasonFlags EmarketnotallowedreasonAcceptedwalletgift = EMarketNotAllowedReasonFlags.EmarketnotallowedreasonAcceptedwalletgift;
        
        /// <summary>
        /// describes XP / progress restrictions to apply for games with duration control /
        /// anti-indulgence enabled for minor Steam China users.
        /// </summary>
        /// <remarks>
        /// WARNING: DO NOT RENUMBER
        /// </remarks>
        public enum EDurationControlProgress : int
        {
            /// <summary>
            /// Full progress
            /// </summary>
            EdurationcontrolprogressFull = unchecked((int)0),
            
            /// <summary>
            /// deprecated - XP or persistent rewards should be halved
            /// </summary>
            EdurationcontrolprogressHalf = unchecked((int)1),
            
            /// <summary>
            /// deprecated - XP or persistent rewards should be stopped
            /// </summary>
            EdurationcontrolprogressNone = unchecked((int)2),
            
            /// <summary>
            /// allowed 3h time since 5h gap/break has elapsed, game should exit - steam will terminate the game soon
            /// </summary>
            EdurationcontrolExitsoon3h = unchecked((int)3),
            
            /// <summary>
            /// allowed 5h time in calendar day has elapsed, game should exit - steam will terminate the game soon
            /// </summary>
            EdurationcontrolExitsoon5h = unchecked((int)4),
            
            /// <summary>
            /// game running after day period, game should exit - steam will terminate the game soon
            /// </summary>
            EdurationcontrolExitsoonNight = unchecked((int)5),
        }
        
        /// <summary>
        /// Full progress
        /// </summary>
        public const Networking.EDurationControlProgress EdurationcontrolprogressFull = EDurationControlProgress.EdurationcontrolprogressFull;
        
        /// <summary>
        /// deprecated - XP or persistent rewards should be halved
        /// </summary>
        public const Networking.EDurationControlProgress EdurationcontrolprogressHalf = EDurationControlProgress.EdurationcontrolprogressHalf;
        
        /// <summary>
        /// deprecated - XP or persistent rewards should be stopped
        /// </summary>
        public const Networking.EDurationControlProgress EdurationcontrolprogressNone = EDurationControlProgress.EdurationcontrolprogressNone;
        
        /// <summary>
        /// allowed 3h time since 5h gap/break has elapsed, game should exit - steam will terminate the game soon
        /// </summary>
        public const Networking.EDurationControlProgress EdurationcontrolExitsoon3h = EDurationControlProgress.EdurationcontrolExitsoon3h;
        
        /// <summary>
        /// allowed 5h time in calendar day has elapsed, game should exit - steam will terminate the game soon
        /// </summary>
        public const Networking.EDurationControlProgress EdurationcontrolExitsoon5h = EDurationControlProgress.EdurationcontrolExitsoon5h;
        
        /// <summary>
        /// game running after day period, game should exit - steam will terminate the game soon
        /// </summary>
        public const Networking.EDurationControlProgress EdurationcontrolExitsoonNight = EDurationControlProgress.EdurationcontrolExitsoonNight;
        
        /// <summary>
        /// describes which notification timer has expired, for steam china duration control feature
        /// </summary>
        /// <remarks>
        /// WARNING: DO NOT RENUMBER
        /// </remarks>
        public enum EDurationControlNotification : int
        {
            /// <summary>
            /// just informing you about progress, no notification to show
            /// </summary>
            EdurationcontrolnotificationNone = unchecked((int)0),
            
            /// <summary>
            /// "you've been playing for N hours"
            /// </summary>
            Edurationcontrolnotification1hour = unchecked((int)1),
            
            /// <summary>
            /// deprecated - "you've been playing for 3 hours; take a break"
            /// </summary>
            Edurationcontrolnotification3hours = unchecked((int)2),
            
            /// <summary>
            /// deprecated - "your XP / progress is half normal"
            /// </summary>
            EdurationcontrolnotificationHalfprogress = unchecked((int)3),
            
            /// <summary>
            /// deprecated - "your XP / progress is zero"
            /// </summary>
            EdurationcontrolnotificationNoprogress = unchecked((int)4),
            
            /// <summary>
            /// allowed 3h time since 5h gap/break has elapsed, game should exit - steam will terminate the game soon
            /// </summary>
            EdurationcontrolnotificationExitsoon3h = unchecked((int)5),
            
            /// <summary>
            /// allowed 5h time in calendar day has elapsed, game should exit - steam will terminate the game soon
            /// </summary>
            EdurationcontrolnotificationExitsoon5h = unchecked((int)6),
            
            /// <summary>
            /// game running after day period, game should exit - steam will terminate the game soon
            /// </summary>
            EdurationcontrolnotificationExitsoonNight = unchecked((int)7),
        }
        
        /// <summary>
        /// just informing you about progress, no notification to show
        /// </summary>
        public const Networking.EDurationControlNotification EdurationcontrolnotificationNone = EDurationControlNotification.EdurationcontrolnotificationNone;
        
        /// <summary>
        /// "you've been playing for N hours"
        /// </summary>
        public const Networking.EDurationControlNotification Edurationcontrolnotification1hour = EDurationControlNotification.Edurationcontrolnotification1hour;
        
        /// <summary>
        /// deprecated - "you've been playing for 3 hours; take a break"
        /// </summary>
        public const Networking.EDurationControlNotification Edurationcontrolnotification3hours = EDurationControlNotification.Edurationcontrolnotification3hours;
        
        /// <summary>
        /// deprecated - "your XP / progress is half normal"
        /// </summary>
        public const Networking.EDurationControlNotification EdurationcontrolnotificationHalfprogress = EDurationControlNotification.EdurationcontrolnotificationHalfprogress;
        
        /// <summary>
        /// deprecated - "your XP / progress is zero"
        /// </summary>
        public const Networking.EDurationControlNotification EdurationcontrolnotificationNoprogress = EDurationControlNotification.EdurationcontrolnotificationNoprogress;
        
        /// <summary>
        /// allowed 3h time since 5h gap/break has elapsed, game should exit - steam will terminate the game soon
        /// </summary>
        public const Networking.EDurationControlNotification EdurationcontrolnotificationExitsoon3h = EDurationControlNotification.EdurationcontrolnotificationExitsoon3h;
        
        /// <summary>
        /// allowed 5h time in calendar day has elapsed, game should exit - steam will terminate the game soon
        /// </summary>
        public const Networking.EDurationControlNotification EdurationcontrolnotificationExitsoon5h = EDurationControlNotification.EdurationcontrolnotificationExitsoon5h;
        
        /// <summary>
        /// game running after day period, game should exit - steam will terminate the game soon
        /// </summary>
        public const Networking.EDurationControlNotification EdurationcontrolnotificationExitsoonNight = EDurationControlNotification.EdurationcontrolnotificationExitsoonNight;
        
        /// <summary>
        /// Specifies a game's online state in relation to duration control
        /// </summary>
        public enum EDurationControlOnlineState : int
        {
            /// <summary>
            /// nil value
            /// </summary>
            EdurationcontrolonlinestateInvalid = unchecked((int)0),
            
            /// <summary>
            /// currently in offline play - single-player, offline co-op, etc.
            /// </summary>
            EdurationcontrolonlinestateOffline = unchecked((int)1),
            
            /// <summary>
            /// currently in online play
            /// </summary>
            EdurationcontrolonlinestateOnline = unchecked((int)2),
            
            /// <summary>
            /// currently in online play and requests not to be interrupted
            /// </summary>
            EdurationcontrolonlinestateOnlinehighpri = unchecked((int)3),
        }
        
        /// <summary>
        /// nil value
        /// </summary>
        public const Networking.EDurationControlOnlineState EdurationcontrolonlinestateInvalid = EDurationControlOnlineState.EdurationcontrolonlinestateInvalid;
        
        /// <summary>
        /// currently in offline play - single-player, offline co-op, etc.
        /// </summary>
        public const Networking.EDurationControlOnlineState EdurationcontrolonlinestateOffline = EDurationControlOnlineState.EdurationcontrolonlinestateOffline;
        
        /// <summary>
        /// currently in online play
        /// </summary>
        public const Networking.EDurationControlOnlineState EdurationcontrolonlinestateOnline = EDurationControlOnlineState.EdurationcontrolonlinestateOnline;
        
        /// <summary>
        /// currently in online play and requests not to be interrupted
        /// </summary>
        public const Networking.EDurationControlOnlineState EdurationcontrolonlinestateOnlinehighpri = EDurationControlOnlineState.EdurationcontrolonlinestateOnlinehighpri;
        
        public enum EGameSearchErrorCode_t : int
        {
            EgamesearcherrorcodeOk = unchecked((int)1),
            
            EgamesearcherrorcodeFailedSearchAlreadyInProgress = unchecked((int)2),
            
            EgamesearcherrorcodeFailedNoSearchInProgress = unchecked((int)3),
            
            /// <summary>
            /// if not the lobby leader can not call SearchForGameWithLobby
            /// </summary>
            EgamesearcherrorcodeFailedNotLobbyLeader = unchecked((int)4),
            
            /// <summary>
            /// no host is available that matches those search params
            /// </summary>
            EgamesearcherrorcodeFailedNoHostAvailable = unchecked((int)5),
            
            /// <summary>
            /// search params are invalid
            /// </summary>
            EgamesearcherrorcodeFailedSearchParamsInvalid = unchecked((int)6),
            
            /// <summary>
            /// offline, could not communicate with server
            /// </summary>
            EgamesearcherrorcodeFailedOffline = unchecked((int)7),
            
            /// <summary>
            /// either the user or the application does not have priveledges to do this
            /// </summary>
            EgamesearcherrorcodeFailedNotauthorized = unchecked((int)8),
            
            /// <summary>
            /// unknown error
            /// </summary>
            EgamesearcherrorcodeFailedUnknownError = unchecked((int)9),
        }
        
        public const Networking.EGameSearchErrorCode_t EgamesearcherrorcodeOk = EGameSearchErrorCode_t.EgamesearcherrorcodeOk;
        
        public const Networking.EGameSearchErrorCode_t EgamesearcherrorcodeFailedSearchAlreadyInProgress = EGameSearchErrorCode_t.EgamesearcherrorcodeFailedSearchAlreadyInProgress;
        
        public const Networking.EGameSearchErrorCode_t EgamesearcherrorcodeFailedNoSearchInProgress = EGameSearchErrorCode_t.EgamesearcherrorcodeFailedNoSearchInProgress;
        
        /// <summary>
        /// if not the lobby leader can not call SearchForGameWithLobby
        /// </summary>
        public const Networking.EGameSearchErrorCode_t EgamesearcherrorcodeFailedNotLobbyLeader = EGameSearchErrorCode_t.EgamesearcherrorcodeFailedNotLobbyLeader;
        
        /// <summary>
        /// no host is available that matches those search params
        /// </summary>
        public const Networking.EGameSearchErrorCode_t EgamesearcherrorcodeFailedNoHostAvailable = EGameSearchErrorCode_t.EgamesearcherrorcodeFailedNoHostAvailable;
        
        /// <summary>
        /// search params are invalid
        /// </summary>
        public const Networking.EGameSearchErrorCode_t EgamesearcherrorcodeFailedSearchParamsInvalid = EGameSearchErrorCode_t.EgamesearcherrorcodeFailedSearchParamsInvalid;
        
        /// <summary>
        /// offline, could not communicate with server
        /// </summary>
        public const Networking.EGameSearchErrorCode_t EgamesearcherrorcodeFailedOffline = EGameSearchErrorCode_t.EgamesearcherrorcodeFailedOffline;
        
        /// <summary>
        /// either the user or the application does not have priveledges to do this
        /// </summary>
        public const Networking.EGameSearchErrorCode_t EgamesearcherrorcodeFailedNotauthorized = EGameSearchErrorCode_t.EgamesearcherrorcodeFailedNotauthorized;
        
        /// <summary>
        /// unknown error
        /// </summary>
        public const Networking.EGameSearchErrorCode_t EgamesearcherrorcodeFailedUnknownError = EGameSearchErrorCode_t.EgamesearcherrorcodeFailedUnknownError;
        
        public enum EPlayerResult_t : int
        {
            /// <summary>
            /// failed to connect after confirming
            /// </summary>
            Eplayerresultfailedtoconnect = unchecked((int)1),
            
            /// <summary>
            /// quit game without completing it
            /// </summary>
            Eplayerresultabandoned = unchecked((int)2),
            
            /// <summary>
            /// kicked by other players/moderator/server rules
            /// </summary>
            Eplayerresultkicked = unchecked((int)3),
            
            /// <summary>
            /// player stayed to end but game did not conclude successfully ( nofault to player )
            /// </summary>
            Eplayerresultincomplete = unchecked((int)4),
            
            /// <summary>
            /// player completed game
            /// </summary>
            Eplayerresultcompleted = unchecked((int)5),
        }
        
        /// <summary>
        /// failed to connect after confirming
        /// </summary>
        public const Networking.EPlayerResult_t Eplayerresultfailedtoconnect = EPlayerResult_t.Eplayerresultfailedtoconnect;
        
        /// <summary>
        /// quit game without completing it
        /// </summary>
        public const Networking.EPlayerResult_t Eplayerresultabandoned = EPlayerResult_t.Eplayerresultabandoned;
        
        /// <summary>
        /// kicked by other players/moderator/server rules
        /// </summary>
        public const Networking.EPlayerResult_t Eplayerresultkicked = EPlayerResult_t.Eplayerresultkicked;
        
        /// <summary>
        /// player stayed to end but game did not conclude successfully ( nofault to player )
        /// </summary>
        public const Networking.EPlayerResult_t Eplayerresultincomplete = EPlayerResult_t.Eplayerresultincomplete;
        
        /// <summary>
        /// player completed game
        /// </summary>
        public const Networking.EPlayerResult_t Eplayerresultcompleted = EPlayerResult_t.Eplayerresultcompleted;
        
        public enum ESteamIPv6ConnectivityProtocol : int
        {
            Esteamipv6connectivityprotocolInvalid = unchecked((int)0),
            
            /// <summary>
            /// because a proxy may make this different than other protocols
            /// </summary>
            Esteamipv6connectivityprotocolHttp = unchecked((int)1),
            
            /// <summary>
            /// test UDP connectivity. Uses a port that is commonly needed for other Steam stuff. If UDP works, TCP probably works.
            /// </summary>
            Esteamipv6connectivityprotocolUdp = unchecked((int)2),
        }
        
        public const Networking.ESteamIPv6ConnectivityProtocol Esteamipv6connectivityprotocolInvalid = ESteamIPv6ConnectivityProtocol.Esteamipv6connectivityprotocolInvalid;
        
        /// <summary>
        /// because a proxy may make this different than other protocols
        /// </summary>
        public const Networking.ESteamIPv6ConnectivityProtocol Esteamipv6connectivityprotocolHttp = ESteamIPv6ConnectivityProtocol.Esteamipv6connectivityprotocolHttp;
        
        /// <summary>
        /// test UDP connectivity. Uses a port that is commonly needed for other Steam stuff. If UDP works, TCP probably works.
        /// </summary>
        public const Networking.ESteamIPv6ConnectivityProtocol Esteamipv6connectivityprotocolUdp = ESteamIPv6ConnectivityProtocol.Esteamipv6connectivityprotocolUdp;
        
        /// <summary>
        /// For the above transport protocol, what do we think the local machine's connectivity to the internet over ipv6 is like
        /// </summary>
        public enum ESteamIPv6ConnectivityState : int
        {
            /// <summary>
            /// We haven't run a test yet
            /// </summary>
            Esteamipv6connectivitystateUnknown = unchecked((int)0),
            
            /// <summary>
            /// We have recently been able to make a request on ipv6 for the given protocol
            /// </summary>
            Esteamipv6connectivitystateGood = unchecked((int)1),
            
            /// <summary>
            /// We failed to make a request, either because this machine has no ipv6 address assigned, or it has no upstream connectivity
            /// </summary>
            Esteamipv6connectivitystateBad = unchecked((int)2),
        }
        
        /// <summary>
        /// We haven't run a test yet
        /// </summary>
        public const Networking.ESteamIPv6ConnectivityState Esteamipv6connectivitystateUnknown = ESteamIPv6ConnectivityState.Esteamipv6connectivitystateUnknown;
        
        /// <summary>
        /// We have recently been able to make a request on ipv6 for the given protocol
        /// </summary>
        public const Networking.ESteamIPv6ConnectivityState Esteamipv6connectivitystateGood = ESteamIPv6ConnectivityState.Esteamipv6connectivitystateGood;
        
        /// <summary>
        /// We failed to make a request, either because this machine has no ipv6 address assigned, or it has no upstream connectivity
        /// </summary>
        public const Networking.ESteamIPv6ConnectivityState Esteamipv6connectivitystateBad = ESteamIPv6ConnectivityState.Esteamipv6connectivitystateBad;
        
        /// <summary>
        /// Steam ID structure (64 bits total)
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct CSteamID
        {
            /// <summary>
            /// 64 bits total
            /// </summary>
            [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
            public partial struct SteamID_t
            {
                [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
                public partial struct SteamIDComponent_t
                {
                    private uint __bitfield__0;
                    
                    /// <summary>
                    /// unique account identifier
                    /// </summary>
                    public uint m_unAccountID
                    {
                        get
                        {
                            return unchecked((uint)((__bitfield__0 >> 0) & 0b11111111111111111111111111111111));
                        }
                        set
                        {
                            __bitfield__0 = (__bitfield__0 & unchecked((uint)0b00000000000000000000000000000000)) | ((((uint)value) & (unchecked((uint)0b11111111111111111111111111111111)) << 0));
                        }
                    }
                    
                    private uint __bitfield__2;
                    
                    /// <summary>
                    /// dynamic instance ID
                    /// </summary>
                    public uint m_unAccountInstance
                    {
                        get
                        {
                            return unchecked((uint)((__bitfield__2 >> 0) & 0b11111111111111111111));
                        }
                        set
                        {
                            __bitfield__2 = (__bitfield__2 & unchecked((uint)0b11111111111100000000000000000000)) | ((((uint)value) & (unchecked((uint)0b11111111111111111111)) << 0));
                        }
                    }
                    
                    /// <summary>
                    /// type of account - can't show as EAccountType, due to signed / unsigned difference
                    /// </summary>
                    public uint m_EAccountType
                    {
                        get
                        {
                            return unchecked((uint)((__bitfield__2 >> 20) & 0b1111));
                        }
                        set
                        {
                            __bitfield__2 = (__bitfield__2 & unchecked((uint)0b11111111000011111111111111111111)) | ((((uint)value) & (unchecked((uint)0b1111)) << 20));
                        }
                    }
                    
                    /// <summary>
                    /// universe this account belongs to
                    /// </summary>
                    public Networking.EUniverse m_EUniverse
                    {
                        get
                        {
                            return unchecked((Networking.EUniverse)((__bitfield__2 >> 24) & 0b11111111));
                        }
                        set
                        {
                            __bitfield__2 = (__bitfield__2 & unchecked((uint)0b00000000111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b11111111)) << 24));
                        }
                    }
                }
                
                [FieldOffset(0)]
                public Networking.CSteamID.SteamID_t.SteamIDComponent_t m_comp;
                
                [FieldOffset(0)]
                public ulong m_unAll64Bits;
            }
            
            public Networking.CSteamID.SteamID_t m_steamid;
        }
        
        /// <summary>
        /// -----------------------------------------------------------------------------
        /// Purpose: encapsulates an appID/modID pair
        /// -----------------------------------------------------------------------------
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct CGameID
        {
            /// <summary>
            /// Internal stuff.  Use the accessors above if possible
            /// </summary>
            public enum EGameIDType : int
            {
                Egameidtypeapp = unchecked((int)0),
                
                Egameidtypegamemod = unchecked((int)1),
                
                Egameidtypeshortcut = unchecked((int)2),
                
                Egameidtypep2p = unchecked((int)3),
            }
            
            [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
            public partial struct GameID_t
            {
                private uint __bitfield__0;
                
                public uint m_nAppID
                {
                    get
                    {
                        return unchecked((uint)((__bitfield__0 >> 0) & 0b111111111111111111111111));
                    }
                    set
                    {
                        __bitfield__0 = (__bitfield__0 & unchecked((uint)0b11111111000000000000000000000000)) | ((((uint)value) & (unchecked((uint)0b111111111111111111111111)) << 0));
                    }
                }
                
                public uint m_nType
                {
                    get
                    {
                        return unchecked((uint)((__bitfield__0 >> 24) & 0b11111111));
                    }
                    set
                    {
                        __bitfield__0 = (__bitfield__0 & unchecked((uint)0b00000000111111111111111111111111)) | ((((uint)value) & (unchecked((uint)0b11111111)) << 24));
                    }
                }
                
                private uint __bitfield__3;
                
                public uint m_nModID
                {
                    get
                    {
                        return unchecked((uint)((__bitfield__3 >> 0) & 0b11111111111111111111111111111111));
                    }
                    set
                    {
                        __bitfield__3 = (__bitfield__3 & unchecked((uint)0b00000000000000000000000000000000)) | ((((uint)value) & (unchecked((uint)0b11111111111111111111111111111111)) << 0));
                    }
                }
            }
            
            [StructLayout(LayoutKind.Explicit, CharSet = CharSet.Ansi)]
            public partial struct CGameIDunion
            {
                [FieldOffset(0)]
                public ulong m_ulGameID;
                
                [FieldOffset(0)]
                public Networking.CGameID.GameID_t m_gameID;
            }
        }
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public partial struct ValvePackingSentinel_t
        {
            public uint m_u32;
            
            public ulong m_u64;
            
            public ushort m_u16;
            
            public double m_d;
        }
        
        /// <summary>
        /// return type of GetAuthSessionTicket
        /// </summary>
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct HAuthTicket : IEquatable<HAuthTicket>
        {
            public HAuthTicket(uint value) => this.Value = value;
            
            public readonly uint Value;
            
            public bool Equals(HAuthTicket other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is HAuthTicket other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator uint(HAuthTicket from) => from.Value;
            
            public static implicit operator HAuthTicket(uint from) => new HAuthTicket(from);
            
            public static bool operator ==(HAuthTicket left, HAuthTicket right) => left.Equals(right);
            
            public static bool operator !=(HAuthTicket left, HAuthTicket right) => !left.Equals(right);
        }
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void PFNPreMinidumpCallback(IntPtr context);
        
        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
        public readonly partial struct compile_time_assert_type : IEquatable<compile_time_assert_type>
        {
            public compile_time_assert_type(string value) => this.Value = value;
            
            [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 1)]
            public readonly string Value;
            
            public bool Equals(compile_time_assert_type other) =>  Value.Equals(other.Value);
            
            public override bool Equals(object obj) => obj is compile_time_assert_type other && Equals(other);
            
            public override int GetHashCode() => Value.GetHashCode();
            
            public override string ToString() => Value.ToString();
            
            public static implicit operator string(compile_time_assert_type from) => from.Value;
            
            public static implicit operator compile_time_assert_type(string from) => new compile_time_assert_type(from);
            
            public static bool operator ==(compile_time_assert_type left, compile_time_assert_type right) => left.Equals(right);
            
            public static bool operator !=(compile_time_assert_type left, compile_time_assert_type right) => !left.Equals(right);
        }
        
        //public const Networking.HAuthTicket k_HAuthTicketInvalid = 0;
        
        public const uint k_unSteamAccountIDMask = 0xFFFFFFFF;
        
        public const uint k_unSteamAccountInstanceMask = 1048575;
        
        /// <summary>
        /// fixed instance for all individual users
        /// </summary>
        public const uint k_unSteamUserDefaultInstance = 1;
        
        public const int k_cchGameExtraInfoMax = 64;
    }
}
