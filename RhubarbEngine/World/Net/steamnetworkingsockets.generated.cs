//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;

namespace Steam
{
    using System.Runtime.InteropServices;
    
    public static partial class Networking
    {
        /// <summary>
        /// Initialize the library.  Optionally, you can set an initial identity for the default
        /// interface that is returned by SteamNetworkingSockets().
        /// </summary>
        /// <remarks>
        /// On failure, false is returned, and a non-localized diagnostic message is returned.
        /// </remarks>
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        [return:MarshalAs(UnmanagedType.U1)]
        public static extern bool GameNetworkingSockets_Init(in Networking.SteamNetworkingIdentity pIdentity, ref Networking.SteamNetworkingErrMsg errMsg);
        
        /// <summary>
        /// Close all connections and listen sockets and free all resources
        /// </summary>
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void GameNetworkingSockets_Kill();
        
        /// <summary>
        /// Custom memory allocation methods.  If you call this, you MUST call it exactly once,
        /// before calling any other API function.  *Most* allocations will pass through these,
        /// especially all allocations that are per-connection.  A few allocations
        /// might still go to the default CRT malloc and operator new.
        /// To use this, you must compile the library with STEAMNETWORKINGSOCKETS_ENABLE_MEM_OVERRIDE
        /// </summary>
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamNetworkingSockets_SetCustomMemoryAllocator(Networking.pfn_malloc_delegate pfn_malloc, Networking.pfn_free_delegate pfn_free, Networking.pfn_realloc_delegate pfn_realloc);
        
      
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate IntPtr pfn_malloc_delegate(Networking.size_t s);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void pfn_free_delegate(IntPtr p);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate IntPtr pfn_realloc_delegate(IntPtr p, Networking.size_t s);

   
        /// <summary>
        /// Statistics about the global lock.
        /// </summary>
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamNetworkingSockets_SetLockWaitWarningThreshold(Networking.SteamNetworkingMicroseconds usecThreshold);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamNetworkingSockets_SetLockAcquiredCallback(Networking.callback_delegate callback);
        
        [UnmanagedFunctionPointer(CallingConvention.Cdecl)]
        public delegate void callback_delegate([MarshalAs(UnmanagedType.LPStr)] string tags, Networking.SteamNetworkingMicroseconds usecWaited);
        
        [DllImport(Library, CallingConvention = CallingConvention.Cdecl)]
        public static extern void SteamNetworkingSockets_SetLockHeldCallback(Networking.callback_delegate callback);
        
   }
}
