/*
 * RhubarbVRApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
	/// <summary>
	/// PrivateUser
	/// </summary>
	[DataContract(Name = "PrivateUser")]
	public partial class PrivateUser : IEquatable<PrivateUser>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="PrivateUser" /> class.
		/// </summary>
		/// <param name="username">username.</param>
		/// <param name="normalizedusername">normalizedusername.</param>
		/// <param name="profileUrl">profileUrl.</param>
		/// <param name="favoriteColor">favoriteColor.</param>
		/// <param name="verified">verified.</param>
		/// <param name="identifier">identifier.</param>
		/// <param name="uuid">uuid.</param>
		/// <param name="creationDate">creationDate.</param>
		/// <param name="banDate">banDate.</param>
		/// <param name="tempbanDate">tempbanDate.</param>
		/// <param name="isAdmin">isAdmin.</param>
		/// <param name="isMod">isMod.</param>
		/// <param name="isAssistant">isAssistant.</param>
		/// <param name="isLightMode">isLightMode.</param>
		/// <param name="tags">tags.</param>
		/// <param name="groups">groups.</param>
		/// <param name="birthDate">birthDate.</param>
		/// <param name="birthDateVerified">birthDateVerified.</param>
		/// <param name="quotamebib">quotamebib.</param>
		/// <param name="usedmebib">usedmebib.</param>
		public PrivateUser(string username = default(string), string normalizedusername = default(string), string profileUrl = default(string), int favoriteColor = default(int), bool verified = default(bool), int identifier = default(int), string uuid = default(string), DateTime creationDate = default(DateTime), DateTime banDate = default(DateTime), DateTime tempbanDate = default(DateTime), bool isAdmin = default(bool), bool isMod = default(bool), bool isAssistant = default(bool), bool isLightMode = default(bool), List<string> tags = default(List<string>), List<string> groups = default(List<string>), DateTime birthDate = default(DateTime), bool birthDateVerified = default(bool), double quotamebib = default(double), double usedmebib = default(double))
		{
			this.Username = username;
			this.Normalizedusername = normalizedusername;
			this.ProfileUrl = profileUrl;
			this.FavoriteColor = favoriteColor;
			this.Verified = verified;
			this.Identifier = identifier;
			this.Uuid = uuid;
			this.CreationDate = creationDate;
			this.BanDate = banDate;
			this.TempbanDate = tempbanDate;
			this.IsAdmin = isAdmin;
			this.IsMod = isMod;
			this.IsAssistant = isAssistant;
			this.IsLightMode = isLightMode;
			this.Tags = tags;
			this.Groups = groups;
			this.BirthDate = birthDate;
			this.BirthDateVerified = birthDateVerified;
			this.Quotamebib = quotamebib;
			this.Usedmebib = usedmebib;
		}

		/// <summary>
		/// Gets or Sets Username
		/// </summary>
		[DataMember(Name = "username", EmitDefaultValue = true)]
		public string Username { get; set; }

		/// <summary>
		/// Gets or Sets Normalizedusername
		/// </summary>
		[DataMember(Name = "normalizedusername", EmitDefaultValue = true)]
		public string Normalizedusername { get; set; }

		/// <summary>
		/// Gets or Sets ProfileUrl
		/// </summary>
		[DataMember(Name = "profileUrl", EmitDefaultValue = true)]
		public string ProfileUrl { get; set; }

		/// <summary>
		/// Gets or Sets FavoriteColor
		/// </summary>
		[DataMember(Name = "favoriteColor", EmitDefaultValue = false)]
		public int FavoriteColor { get; set; }

		/// <summary>
		/// Gets or Sets Verified
		/// </summary>
		[DataMember(Name = "verified", EmitDefaultValue = false)]
		public bool Verified { get; set; }

		/// <summary>
		/// Gets or Sets Identifier
		/// </summary>
		[DataMember(Name = "identifier", EmitDefaultValue = false)]
		public int Identifier { get; set; }

		/// <summary>
		/// Gets or Sets Uuid
		/// </summary>
		[DataMember(Name = "uuid", EmitDefaultValue = true)]
		public string Uuid { get; set; }

		/// <summary>
		/// Gets or Sets CreationDate
		/// </summary>
		[DataMember(Name = "creationDate", EmitDefaultValue = false)]
		public DateTime CreationDate { get; set; }

		/// <summary>
		/// Gets or Sets BanDate
		/// </summary>
		[DataMember(Name = "banDate", EmitDefaultValue = false)]
		public DateTime BanDate { get; set; }

		/// <summary>
		/// Gets or Sets TempbanDate
		/// </summary>
		[DataMember(Name = "tempbanDate", EmitDefaultValue = false)]
		public DateTime TempbanDate { get; set; }

		/// <summary>
		/// Gets or Sets IsAdmin
		/// </summary>
		[DataMember(Name = "isAdmin", EmitDefaultValue = false)]
		public bool IsAdmin { get; set; }

		/// <summary>
		/// Gets or Sets IsMod
		/// </summary>
		[DataMember(Name = "isMod", EmitDefaultValue = false)]
		public bool IsMod { get; set; }

		/// <summary>
		/// Gets or Sets IsAssistant
		/// </summary>
		[DataMember(Name = "isAssistant", EmitDefaultValue = false)]
		public bool IsAssistant { get; set; }

		/// <summary>
		/// Gets or Sets IsLightMode
		/// </summary>
		[DataMember(Name = "isLightMode", EmitDefaultValue = false)]
		public bool IsLightMode { get; set; }

		/// <summary>
		/// Gets or Sets Tags
		/// </summary>
		[DataMember(Name = "tags", EmitDefaultValue = true)]
		public List<string> Tags { get; set; }

		/// <summary>
		/// Gets or Sets Groups
		/// </summary>
		[DataMember(Name = "groups", EmitDefaultValue = true)]
		public List<string> Groups { get; set; }

		/// <summary>
		/// Gets or Sets BirthDate
		/// </summary>
		[DataMember(Name = "birthDate", EmitDefaultValue = false)]
		public DateTime BirthDate { get; set; }

		/// <summary>
		/// Gets or Sets BirthDateVerified
		/// </summary>
		[DataMember(Name = "birthDateVerified", EmitDefaultValue = false)]
		public bool BirthDateVerified { get; set; }

		/// <summary>
		/// Gets or Sets Quotamebib
		/// </summary>
		[DataMember(Name = "quotamebib", EmitDefaultValue = false)]
		public double Quotamebib { get; set; }

		/// <summary>
		/// Gets or Sets Usedmebib
		/// </summary>
		[DataMember(Name = "usedmebib", EmitDefaultValue = false)]
		public double Usedmebib { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class PrivateUser {\n");
			sb.Append("  Username: ").Append(Username).Append("\n");
			sb.Append("  Normalizedusername: ").Append(Normalizedusername).Append("\n");
			sb.Append("  ProfileUrl: ").Append(ProfileUrl).Append("\n");
			sb.Append("  FavoriteColor: ").Append(FavoriteColor).Append("\n");
			sb.Append("  Verified: ").Append(Verified).Append("\n");
			sb.Append("  Identifier: ").Append(Identifier).Append("\n");
			sb.Append("  Uuid: ").Append(Uuid).Append("\n");
			sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
			sb.Append("  BanDate: ").Append(BanDate).Append("\n");
			sb.Append("  TempbanDate: ").Append(TempbanDate).Append("\n");
			sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
			sb.Append("  IsMod: ").Append(IsMod).Append("\n");
			sb.Append("  IsAssistant: ").Append(IsAssistant).Append("\n");
			sb.Append("  IsLightMode: ").Append(IsLightMode).Append("\n");
			sb.Append("  Tags: ").Append(Tags).Append("\n");
			sb.Append("  Groups: ").Append(Groups).Append("\n");
			sb.Append("  BirthDate: ").Append(BirthDate).Append("\n");
			sb.Append("  BirthDateVerified: ").Append(BirthDateVerified).Append("\n");
			sb.Append("  Quotamebib: ").Append(Quotamebib).Append("\n");
			sb.Append("  Usedmebib: ").Append(Usedmebib).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public virtual string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as PrivateUser);
		}

		/// <summary>
		/// Returns true if PrivateUser instances are equal
		/// </summary>
		/// <param name="input">Instance of PrivateUser to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(PrivateUser input)
		{
			if (input == null)
				return false;

			return
				(
					this.Username == input.Username ||
					(this.Username != null &&
					this.Username.Equals(input.Username))
				) &&
				(
					this.Normalizedusername == input.Normalizedusername ||
					(this.Normalizedusername != null &&
					this.Normalizedusername.Equals(input.Normalizedusername))
				) &&
				(
					this.ProfileUrl == input.ProfileUrl ||
					(this.ProfileUrl != null &&
					this.ProfileUrl.Equals(input.ProfileUrl))
				) &&
				(
					this.FavoriteColor == input.FavoriteColor ||
					this.FavoriteColor.Equals(input.FavoriteColor)
				) &&
				(
					this.Verified == input.Verified ||
					this.Verified.Equals(input.Verified)
				) &&
				(
					this.Identifier == input.Identifier ||
					this.Identifier.Equals(input.Identifier)
				) &&
				(
					this.Uuid == input.Uuid ||
					(this.Uuid != null &&
					this.Uuid.Equals(input.Uuid))
				) &&
				(
					this.CreationDate == input.CreationDate ||
					(this.CreationDate != null &&
					this.CreationDate.Equals(input.CreationDate))
				) &&
				(
					this.BanDate == input.BanDate ||
					(this.BanDate != null &&
					this.BanDate.Equals(input.BanDate))
				) &&
				(
					this.TempbanDate == input.TempbanDate ||
					(this.TempbanDate != null &&
					this.TempbanDate.Equals(input.TempbanDate))
				) &&
				(
					this.IsAdmin == input.IsAdmin ||
					this.IsAdmin.Equals(input.IsAdmin)
				) &&
				(
					this.IsMod == input.IsMod ||
					this.IsMod.Equals(input.IsMod)
				) &&
				(
					this.IsAssistant == input.IsAssistant ||
					this.IsAssistant.Equals(input.IsAssistant)
				) &&
				(
					this.IsLightMode == input.IsLightMode ||
					this.IsLightMode.Equals(input.IsLightMode)
				) &&
				(
					this.Tags == input.Tags ||
					this.Tags != null &&
					input.Tags != null &&
					this.Tags.SequenceEqual(input.Tags)
				) &&
				(
					this.Groups == input.Groups ||
					this.Groups != null &&
					input.Groups != null &&
					this.Groups.SequenceEqual(input.Groups)
				) &&
				(
					this.BirthDate == input.BirthDate ||
					(this.BirthDate != null &&
					this.BirthDate.Equals(input.BirthDate))
				) &&
				(
					this.BirthDateVerified == input.BirthDateVerified ||
					this.BirthDateVerified.Equals(input.BirthDateVerified)
				) &&
				(
					this.Quotamebib == input.Quotamebib ||
					this.Quotamebib.Equals(input.Quotamebib)
				) &&
				(
					this.Usedmebib == input.Usedmebib ||
					this.Usedmebib.Equals(input.Usedmebib)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.Username != null)
					hashCode = hashCode * 59 + this.Username.GetHashCode();
				if (this.Normalizedusername != null)
					hashCode = hashCode * 59 + this.Normalizedusername.GetHashCode();
				if (this.ProfileUrl != null)
					hashCode = hashCode * 59 + this.ProfileUrl.GetHashCode();
				hashCode = hashCode * 59 + this.FavoriteColor.GetHashCode();
				hashCode = hashCode * 59 + this.Verified.GetHashCode();
				hashCode = hashCode * 59 + this.Identifier.GetHashCode();
				if (this.Uuid != null)
					hashCode = hashCode * 59 + this.Uuid.GetHashCode();
				if (this.CreationDate != null)
					hashCode = hashCode * 59 + this.CreationDate.GetHashCode();
				if (this.BanDate != null)
					hashCode = hashCode * 59 + this.BanDate.GetHashCode();
				if (this.TempbanDate != null)
					hashCode = hashCode * 59 + this.TempbanDate.GetHashCode();
				hashCode = hashCode * 59 + this.IsAdmin.GetHashCode();
				hashCode = hashCode * 59 + this.IsMod.GetHashCode();
				hashCode = hashCode * 59 + this.IsAssistant.GetHashCode();
				hashCode = hashCode * 59 + this.IsLightMode.GetHashCode();
				if (this.Tags != null)
					hashCode = hashCode * 59 + this.Tags.GetHashCode();
				if (this.Groups != null)
					hashCode = hashCode * 59 + this.Groups.GetHashCode();
				if (this.BirthDate != null)
					hashCode = hashCode * 59 + this.BirthDate.GetHashCode();
				hashCode = hashCode * 59 + this.BirthDateVerified.GetHashCode();
				hashCode = hashCode * 59 + this.Quotamebib.GetHashCode();
				hashCode = hashCode * 59 + this.Usedmebib.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
