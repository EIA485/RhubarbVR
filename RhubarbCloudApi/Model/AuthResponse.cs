/*
 * RhubarbVRApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
	/// <summary>
	/// AuthResponse
	/// </summary>
	[DataContract(Name = "AuthResponse")]
	public partial class AuthResponse : IEquatable<AuthResponse>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="AuthResponse" /> class.
		/// </summary>
		/// <param name="user">user.</param>
		/// <param name="token">token.</param>
		public AuthResponse(PrivateUser user = default(PrivateUser), string token = default(string))
		{
			this.User = user;
			this.Token = token;
		}

		/// <summary>
		/// Gets or Sets User
		/// </summary>
		[DataMember(Name = "user", EmitDefaultValue = false)]
		public PrivateUser User { get; set; }

		/// <summary>
		/// Gets or Sets Token
		/// </summary>
		[DataMember(Name = "token", EmitDefaultValue = true)]
		public string Token { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class AuthResponse {\n");
			sb.Append("  User: ").Append(User).Append("\n");
			sb.Append("  Token: ").Append(Token).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public virtual string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as AuthResponse);
		}

		/// <summary>
		/// Returns true if AuthResponse instances are equal
		/// </summary>
		/// <param name="input">Instance of AuthResponse to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(AuthResponse input)
		{
			if (input == null)
				return false;

			return
				(
					this.User == input.User ||
					(this.User != null &&
					this.User.Equals(input.User))
				) &&
				(
					this.Token == input.Token ||
					(this.Token != null &&
					this.Token.Equals(input.Token))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.User != null)
					hashCode = hashCode * 59 + this.User.GetHashCode();
				if (this.Token != null)
					hashCode = hashCode * 59 + this.Token.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
