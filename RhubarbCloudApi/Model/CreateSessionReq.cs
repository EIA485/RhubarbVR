/*
 * RhubarbVRApi
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
	/// <summary>
	/// CreateSessionReq
	/// </summary>
	[DataContract(Name = "CreateSessionReq")]
	public partial class CreateSessionReq : IEquatable<CreateSessionReq>, IValidatableObject
	{
		/// <summary>
		/// Initializes a new instance of the <see cref="CreateSessionReq" /> class.
		/// </summary>
		/// <param name="name">name.</param>
		/// <param name="correspondingworlduuid">correspondingworlduuid.</param>
		/// <param name="tags">tags.</param>
		/// <param name="thumbnailurl">thumbnailurl.</param>
		/// <param name="sessionstype">sessionstype.</param>
		/// <param name="accesslevel">accesslevel.</param>
		/// <param name="eighteenandolder">eighteenandolder.</param>
		/// <param name="maxUsers">maxUsers.</param>
		/// <param name="mobilefriendly">mobilefriendly.</param>
		/// <param name="sessionconnection">sessionconnection.</param>
		public CreateSessionReq(string name = default(string), string correspondingworlduuid = default(string), List<string> tags = default(List<string>), string thumbnailurl = default(string), int? sessionstype = default(int?), int? accesslevel = default(int?), bool? eighteenandolder = default(bool?), int? maxUsers = default(int?), bool? mobilefriendly = default(bool?), string sessionconnection = default(string))
		{
			this.Name = name;
			this.Correspondingworlduuid = correspondingworlduuid;
			this.Tags = tags;
			this.Thumbnailurl = thumbnailurl;
			this.Sessionstype = sessionstype;
			this.Accesslevel = accesslevel;
			this.Eighteenandolder = eighteenandolder;
			this.MaxUsers = maxUsers;
			this.Mobilefriendly = mobilefriendly;
			this.Sessionconnection = sessionconnection;
		}

		/// <summary>
		/// Gets or Sets Name
		/// </summary>
		[DataMember(Name = "name", EmitDefaultValue = true)]
		public string Name { get; set; }

		/// <summary>
		/// Gets or Sets Correspondingworlduuid
		/// </summary>
		[DataMember(Name = "correspondingworlduuid", EmitDefaultValue = true)]
		public string Correspondingworlduuid { get; set; }

		/// <summary>
		/// Gets or Sets Tags
		/// </summary>
		[DataMember(Name = "tags", EmitDefaultValue = true)]
		public List<string> Tags { get; set; }

		/// <summary>
		/// Gets or Sets Thumbnailurl
		/// </summary>
		[DataMember(Name = "thumbnailurl", EmitDefaultValue = true)]
		public string Thumbnailurl { get; set; }

		/// <summary>
		/// Gets or Sets Sessionstype
		/// </summary>
		[DataMember(Name = "sessionstype", EmitDefaultValue = true)]
		public int? Sessionstype { get; set; }

		/// <summary>
		/// Gets or Sets Accesslevel
		/// </summary>
		[DataMember(Name = "accesslevel", EmitDefaultValue = true)]
		public int? Accesslevel { get; set; }

		/// <summary>
		/// Gets or Sets Eighteenandolder
		/// </summary>
		[DataMember(Name = "eighteenandolder", EmitDefaultValue = true)]
		public bool? Eighteenandolder { get; set; }

		/// <summary>
		/// Gets or Sets MaxUsers
		/// </summary>
		[DataMember(Name = "maxUsers", EmitDefaultValue = true)]
		public int? MaxUsers { get; set; }

		/// <summary>
		/// Gets or Sets Mobilefriendly
		/// </summary>
		[DataMember(Name = "mobilefriendly", EmitDefaultValue = true)]
		public bool? Mobilefriendly { get; set; }

		/// <summary>
		/// Gets or Sets Sessionconnection
		/// </summary>
		[DataMember(Name = "sessionconnection", EmitDefaultValue = true)]
		public string Sessionconnection { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class CreateSessionReq {\n");
			sb.Append("  Name: ").Append(Name).Append("\n");
			sb.Append("  Correspondingworlduuid: ").Append(Correspondingworlduuid).Append("\n");
			sb.Append("  Tags: ").Append(Tags).Append("\n");
			sb.Append("  Thumbnailurl: ").Append(Thumbnailurl).Append("\n");
			sb.Append("  Sessionstype: ").Append(Sessionstype).Append("\n");
			sb.Append("  Accesslevel: ").Append(Accesslevel).Append("\n");
			sb.Append("  Eighteenandolder: ").Append(Eighteenandolder).Append("\n");
			sb.Append("  MaxUsers: ").Append(MaxUsers).Append("\n");
			sb.Append("  Mobilefriendly: ").Append(Mobilefriendly).Append("\n");
			sb.Append("  Sessionconnection: ").Append(Sessionconnection).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public virtual string ToJson()
		{
			return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="input">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object input)
		{
			return this.Equals(input as CreateSessionReq);
		}

		/// <summary>
		/// Returns true if CreateSessionReq instances are equal
		/// </summary>
		/// <param name="input">Instance of CreateSessionReq to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(CreateSessionReq input)
		{
			if (input == null)
				return false;

			return
				(
					this.Name == input.Name ||
					(this.Name != null &&
					this.Name.Equals(input.Name))
				) &&
				(
					this.Correspondingworlduuid == input.Correspondingworlduuid ||
					(this.Correspondingworlduuid != null &&
					this.Correspondingworlduuid.Equals(input.Correspondingworlduuid))
				) &&
				(
					this.Tags == input.Tags ||
					this.Tags != null &&
					input.Tags != null &&
					this.Tags.SequenceEqual(input.Tags)
				) &&
				(
					this.Thumbnailurl == input.Thumbnailurl ||
					(this.Thumbnailurl != null &&
					this.Thumbnailurl.Equals(input.Thumbnailurl))
				) &&
				(
					this.Sessionstype == input.Sessionstype ||
					(this.Sessionstype != null &&
					this.Sessionstype.Equals(input.Sessionstype))
				) &&
				(
					this.Accesslevel == input.Accesslevel ||
					(this.Accesslevel != null &&
					this.Accesslevel.Equals(input.Accesslevel))
				) &&
				(
					this.Eighteenandolder == input.Eighteenandolder ||
					(this.Eighteenandolder != null &&
					this.Eighteenandolder.Equals(input.Eighteenandolder))
				) &&
				(
					this.MaxUsers == input.MaxUsers ||
					(this.MaxUsers != null &&
					this.MaxUsers.Equals(input.MaxUsers))
				) &&
				(
					this.Mobilefriendly == input.Mobilefriendly ||
					(this.Mobilefriendly != null &&
					this.Mobilefriendly.Equals(input.Mobilefriendly))
				) &&
				(
					this.Sessionconnection == input.Sessionconnection ||
					(this.Sessionconnection != null &&
					this.Sessionconnection.Equals(input.Sessionconnection))
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				int hashCode = 41;
				if (this.Name != null)
					hashCode = hashCode * 59 + this.Name.GetHashCode();
				if (this.Correspondingworlduuid != null)
					hashCode = hashCode * 59 + this.Correspondingworlduuid.GetHashCode();
				if (this.Tags != null)
					hashCode = hashCode * 59 + this.Tags.GetHashCode();
				if (this.Thumbnailurl != null)
					hashCode = hashCode * 59 + this.Thumbnailurl.GetHashCode();
				if (this.Sessionstype != null)
					hashCode = hashCode * 59 + this.Sessionstype.GetHashCode();
				if (this.Accesslevel != null)
					hashCode = hashCode * 59 + this.Accesslevel.GetHashCode();
				if (this.Eighteenandolder != null)
					hashCode = hashCode * 59 + this.Eighteenandolder.GetHashCode();
				if (this.MaxUsers != null)
					hashCode = hashCode * 59 + this.MaxUsers.GetHashCode();
				if (this.Mobilefriendly != null)
					hashCode = hashCode * 59 + this.Mobilefriendly.GetHashCode();
				if (this.Sessionconnection != null)
					hashCode = hashCode * 59 + this.Sessionconnection.GetHashCode();
				return hashCode;
			}
		}

		/// <summary>
		/// To validate all properties of the instance
		/// </summary>
		/// <param name="validationContext">Validation context</param>
		/// <returns>Validation Result</returns>
		IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
		{
			yield break;
		}
	}

}
